{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5ae93d37",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:07.012009Z",
     "iopub.status.busy": "2024-05-06T16:21:07.011538Z",
     "iopub.status.idle": "2024-05-06T16:21:07.886752Z",
     "shell.execute_reply": "2024-05-06T16:21:07.885483Z"
    },
    "papermill": {
     "duration": 0.894317,
     "end_time": "2024-05-06T16:21:07.889919",
     "exception": false,
     "start_time": "2024-05-06T16:21:06.995602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/russia-and-ukraine/corpus_date_2.pkl\n",
      "/kaggle/input/russia-ukraine-wars/corpus.pkl\n",
      "/kaggle/input/russia-ukraine-wars/cv.pkl\n",
      "/kaggle/input/russia-ukraine-wars/dataframe.pkl\n",
      "/kaggle/input/russia-ukraine-wars/corpus_date.pkl\n",
      "/kaggle/input/russia-ukraine-wars/dataterm.pkl\n",
      "/kaggle/input/russia-ukraine-wars/dtm.pkl\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5ae2284",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:07.917698Z",
     "iopub.status.busy": "2024-05-06T16:21:07.917155Z",
     "iopub.status.idle": "2024-05-06T16:21:08.017375Z",
     "shell.execute_reply": "2024-05-06T16:21:08.016091Z"
    },
    "papermill": {
     "duration": 0.116911,
     "end_time": "2024-05-06T16:21:08.019973",
     "exception": false,
     "start_time": "2024-05-06T16:21:07.903062",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>border</th>\n",
       "      <th>russia</th>\n",
       "      <th>russian</th>\n",
       "      <th>war</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272477</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272478</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272479</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272480</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>272481</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>272482 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        border  russia  russian  war\n",
       "0            1       0        1    0\n",
       "1            1       0        3    0\n",
       "2            1       0        1    0\n",
       "3            1       0        1    0\n",
       "4            1       1        1    0\n",
       "...        ...     ...      ...  ...\n",
       "272477       0       0        0    1\n",
       "272478       0       1        0    1\n",
       "272479       0       1        0    1\n",
       "272480       0       2        0    1\n",
       "272481       0       1        0    1\n",
       "\n",
       "[272482 rows x 4 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's read in our document-term matrix\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "data = pd.read_pickle('/kaggle/input/russia-ukraine-wars/dtm.pkl')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1ec4b473",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:08.048739Z",
     "iopub.status.busy": "2024-05-06T16:21:08.047871Z",
     "iopub.status.idle": "2024-05-06T16:21:08.277788Z",
     "shell.execute_reply": "2024-05-06T16:21:08.276710Z"
    },
    "papermill": {
     "duration": 0.247207,
     "end_time": "2024-05-06T16:21:08.280620",
     "exception": false,
     "start_time": "2024-05-06T16:21:08.033413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>aa</th>\n",
       "      <th>abandoned</th>\n",
       "      <th>abhinandan</th>\n",
       "      <th>ability</th>\n",
       "      <th>able</th>\n",
       "      <th>abm</th>\n",
       "      <th>abortion</th>\n",
       "      <th>absolute</th>\n",
       "      <th>absolutely</th>\n",
       "      <th>absorbed</th>\n",
       "      <th>...</th>\n",
       "      <th>zelenksy</th>\n",
       "      <th>zelensky</th>\n",
       "      <th>zelenskyy</th>\n",
       "      <th>zhytomyr</th>\n",
       "      <th>zionazi</th>\n",
       "      <th>zoka</th>\n",
       "      <th>zone</th>\n",
       "      <th>zones</th>\n",
       "      <th>zoomed</th>\n",
       "      <th>zubrin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows Ã— 4502 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     aa  abandoned  abhinandan  ability  able  abm  abortion  absolute  \\\n",
       "0     0          0           0        0     0    0         0         0   \n",
       "1     0          0           0        0     0    0         0         0   \n",
       "2     0          0           0        0     0    0         0         0   \n",
       "3     0          0           0        0     0    0         0         0   \n",
       "4     0          0           0        0     0    0         0         0   \n",
       "..   ..        ...         ...      ...   ...  ...       ...       ...   \n",
       "995   0          0           0        0     0    0         0         0   \n",
       "996   0          0           0        0     0    0         0         0   \n",
       "997   0          0           0        0     0    0         0         0   \n",
       "998   0          0           0        0     0    0         0         0   \n",
       "999   0          0           0        0     0    0         0         0   \n",
       "\n",
       "     absolutely  absorbed  ...  zelenksy  zelensky  zelenskyy  zhytomyr  \\\n",
       "0             0         0  ...         0         0          0         0   \n",
       "1             0         0  ...         0         0          0         0   \n",
       "2             0         0  ...         0         0          0         0   \n",
       "3             0         0  ...         0         0          0         0   \n",
       "4             0         0  ...         0         0          0         0   \n",
       "..          ...       ...  ...       ...       ...        ...       ...   \n",
       "995           0         0  ...         0         0          0         0   \n",
       "996           0         0  ...         0         0          0         0   \n",
       "997           0         0  ...         0         0          0         0   \n",
       "998           0         0  ...         0         0          0         0   \n",
       "999           0         0  ...         0         0          0         0   \n",
       "\n",
       "     zionazi  zoka  zone  zones  zoomed  zubrin  \n",
       "0          0     0     0      0       0       0  \n",
       "1          0     0     0      0       0       0  \n",
       "2          0     0     0      0       0       0  \n",
       "3          0     0     0      0       0       0  \n",
       "4          0     0     1      0       0       0  \n",
       "..       ...   ...   ...    ...     ...     ...  \n",
       "995        0     0     0      0       0       0  \n",
       "996        0     0     0      0       0       0  \n",
       "997        0     0     0      0       0       0  \n",
       "998        0     0     0      0       0       0  \n",
       "999        0     0     0      0       0       0  \n",
       "\n",
       "[1000 rows x 4502 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's read in our document-term matrix\n",
    "import pandas as pd\n",
    "import pickle\n",
    "\n",
    "data = pd.read_pickle('/kaggle/input/russia-ukraine-wars/dataterm.pkl')\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5dc7054c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:08.311206Z",
     "iopub.status.busy": "2024-05-06T16:21:08.310747Z",
     "iopub.status.idle": "2024-05-06T16:21:19.823205Z",
     "shell.execute_reply": "2024-05-06T16:21:19.822158Z"
    },
    "papermill": {
     "duration": 11.531532,
     "end_time": "2024-05-06T16:21:19.826027",
     "exception": false,
     "start_time": "2024-05-06T16:21:08.294495",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Import the necessary modules for LDA with gensim\n",
    "# Terminal / Anaconda Navigator: conda install -c conda-forge gensim\n",
    "from gensim import matutils, models\n",
    "import scipy.sparse\n",
    "\n",
    "# import logging\n",
    "# logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "920190e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:19.856581Z",
     "iopub.status.busy": "2024-05-06T16:21:19.855918Z",
     "iopub.status.idle": "2024-05-06T16:21:19.879204Z",
     "shell.execute_reply": "2024-05-06T16:21:19.878097Z"
    },
    "papermill": {
     "duration": 0.041417,
     "end_time": "2024-05-06T16:21:19.881713",
     "exception": false,
     "start_time": "2024-05-06T16:21:19.840296",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>990</th>\n",
       "      <th>991</th>\n",
       "      <th>992</th>\n",
       "      <th>993</th>\n",
       "      <th>994</th>\n",
       "      <th>995</th>\n",
       "      <th>996</th>\n",
       "      <th>997</th>\n",
       "      <th>998</th>\n",
       "      <th>999</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>aa</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>abandoned</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>abhinandan</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ability</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>able</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 1000 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            0    1    2    3    4    5    6    7    8    9    ...  990  991  \\\n",
       "aa            0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "abandoned     0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "abhinandan    0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "ability       0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "able          0    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "\n",
       "            992  993  994  995  996  997  998  999  \n",
       "aa            0    0    0    0    0    0    0    0  \n",
       "abandoned     0    0    0    0    0    0    0    0  \n",
       "abhinandan    0    0    0    0    0    0    0    0  \n",
       "ability       0    0    0    0    0    0    0    0  \n",
       "able          0    0    0    0    0    0    0    0  \n",
       "\n",
       "[5 rows x 1000 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One of the required inputs is a term-document matrix\n",
    "tdm = data.transpose()\n",
    "tdm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fa3dc66f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:19.912409Z",
     "iopub.status.busy": "2024-05-06T16:21:19.911977Z",
     "iopub.status.idle": "2024-05-06T16:21:19.979424Z",
     "shell.execute_reply": "2024-05-06T16:21:19.977999Z"
    },
    "papermill": {
     "duration": 0.086065,
     "end_time": "2024-05-06T16:21:19.982168",
     "exception": false,
     "start_time": "2024-05-06T16:21:19.896103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<gensim.matutils.Sparse2Corpus object at 0x7e3805667a60>\n"
     ]
    }
   ],
   "source": [
    "# We're going to put the term-document matrix into a new gensim format, from df --> sparse matrix --> gensim corpus\n",
    "sparse_counts = scipy.sparse.csr_matrix(tdm)\n",
    "corpus = matutils.Sparse2Corpus(sparse_counts)\n",
    "print(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a286c7f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:20.013391Z",
     "iopub.status.busy": "2024-05-06T16:21:20.012968Z",
     "iopub.status.idle": "2024-05-06T16:21:20.185022Z",
     "shell.execute_reply": "2024-05-06T16:21:20.183927Z"
    },
    "papermill": {
     "duration": 0.191093,
     "end_time": "2024-05-06T16:21:20.187748",
     "exception": false,
     "start_time": "2024-05-06T16:21:19.996655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Gensim also requires dictionary of the all terms and their respective location in the term-document matrix\n",
    "cv = pickle.load(open(\"/kaggle/input/russia-ukraine-wars/cv.pkl\", \"rb\"))\n",
    "id2word = dict((v, k) for k, v in cv.vocabulary_.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f57ac3b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:20.218617Z",
     "iopub.status.busy": "2024-05-06T16:21:20.218195Z",
     "iopub.status.idle": "2024-05-06T16:21:33.942169Z",
     "shell.execute_reply": "2024-05-06T16:21:33.941019Z"
    },
    "papermill": {
     "duration": 13.74243,
     "end_time": "2024-05-06T16:21:33.944756",
     "exception": false,
     "start_time": "2024-05-06T16:21:20.202326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.056*\"thermobaric\" + 0.047*\"relative\" + 0.046*\"bagchi\" + 0.019*\"related\" + 0.015*\"mercilessly\" + 0.008*\"una\" + 0.006*\"overseas\" + 0.006*\"experts\" + 0.006*\"owns\" + 0.005*\"threatening\"'),\n",
       " (1,\n",
       "  '0.047*\"relative\" + 0.045*\"thermobaric\" + 0.043*\"bagchi\" + 0.018*\"mercilessly\" + 0.013*\"related\" + 0.013*\"positive\" + 0.007*\"absolutely\" + 0.005*\"ukranian\" + 0.005*\"tbf\" + 0.005*\"objects\"')]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now that we have the corpus (term-document matrix) and id2word (dictionary of location: term),\n",
    "# we need to specify two other parameters as well - the number of topics and the number of passes\n",
    "lda = models.LdaModel(corpus=corpus, id2word=id2word, num_topics=2, passes=10)\n",
    "lda.print_topics()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "754e0801",
   "metadata": {
    "papermill": {
     "duration": 0.014162,
     "end_time": "2024-05-06T16:21:33.973745",
     "exception": false,
     "start_time": "2024-05-06T16:21:33.959583",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**without gensim**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4b9ad485",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:21:34.004804Z",
     "iopub.status.busy": "2024-05-06T16:21:34.003896Z",
     "iopub.status.idle": "2024-05-06T16:22:43.543556Z",
     "shell.execute_reply": "2024-05-06T16:22:43.541966Z"
    },
    "papermill": {
     "duration": 69.559375,
     "end_time": "2024-05-06T16:22:43.547528",
     "exception": false,
     "start_time": "2024-05-06T16:21:33.988153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best LDA model's params: {'n_components': 5}\n",
      "Best log likelihood Score for the LDA model: -40384.48001897304\n",
      "LDA model Perplexity on train data: 1463.5613728182668\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "\n",
    "# Define the parameter grid\n",
    "grid_params = {'n_components' : list(range(5, 10))}\n",
    "\n",
    "# Instantiate LDA model\n",
    "lda = LatentDirichletAllocation()\n",
    "\n",
    "# Create GridSearchCV object\n",
    "lda_model = GridSearchCV(lda, param_grid=grid_params)\n",
    "\n",
    "# Fit the model to your document-term matrix\n",
    "lda_model.fit(data)\n",
    "\n",
    "# Get the best LDA model\n",
    "best_lda_model = lda_model.best_estimator_\n",
    "\n",
    "# Print the best parameters and evaluation metrics\n",
    "print(\"Best LDA model's params:\", lda_model.best_params_)\n",
    "print(\"Best log likelihood Score for the LDA model:\", lda_model.best_score_)\n",
    "print(\"LDA model Perplexity on train data:\", best_lda_model.perplexity(data))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "eeb35027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:22:43.589373Z",
     "iopub.status.busy": "2024-05-06T16:22:43.587678Z",
     "iopub.status.idle": "2024-05-06T16:22:54.088081Z",
     "shell.execute_reply": "2024-05-06T16:22:54.086865Z"
    },
    "papermill": {
     "duration": 10.525671,
     "end_time": "2024-05-06T16:22:54.090820",
     "exception": false,
     "start_time": "2024-05-06T16:22:43.565149",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.052*\"thermobaric\" + 0.040*\"relative\" + 0.039*\"bagchi\" + 0.020*\"related\" + 0.015*\"mercilessly\" + 0.013*\"positive\" + 0.006*\"threatening\" + 0.006*\"tbf\" + 0.006*\"una\" + 0.005*\"longest\"'),\n",
       " (1,\n",
       "  '0.056*\"thermobaric\" + 0.053*\"relative\" + 0.050*\"bagchi\" + 0.021*\"related\" + 0.018*\"mercilessly\" + 0.009*\"experts\" + 0.008*\"overseas\" + 0.007*\"absolutely\" + 0.007*\"positive\" + 0.006*\"objects\"'),\n",
       " (2,\n",
       "  '0.052*\"relative\" + 0.051*\"thermobaric\" + 0.046*\"bagchi\" + 0.014*\"mercilessly\" + 0.011*\"related\" + 0.007*\"tbf\" + 0.006*\"una\" + 0.006*\"absolutely\" + 0.006*\"cuba\" + 0.005*\"mig\"'),\n",
       " (3,\n",
       "  '0.037*\"thermobaric\" + 0.034*\"bagchi\" + 0.033*\"relative\" + 0.021*\"mercilessly\" + 0.014*\"positive\" + 0.010*\"related\" + 0.007*\"experts\" + 0.007*\"luhansk\" + 0.005*\"una\" + 0.005*\"defund\"')]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LDA for num_topics = 4\n",
    "lda = models.LdaModel(corpus=corpus, id2word=id2word, num_topics=4, passes=10)\n",
    "lda.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c1d13f6c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:22:54.123203Z",
     "iopub.status.busy": "2024-05-06T16:22:54.122657Z",
     "iopub.status.idle": "2024-05-06T16:23:04.007018Z",
     "shell.execute_reply": "2024-05-06T16:23:04.005858Z"
    },
    "papermill": {
     "duration": 9.904051,
     "end_time": "2024-05-06T16:23:04.009757",
     "exception": false,
     "start_time": "2024-05-06T16:22:54.105706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.045*\"thermobaric\" + 0.039*\"bagchi\" + 0.038*\"relative\" + 0.011*\"related\" + 0.007*\"mercilessly\" + 0.007*\"una\" + 0.006*\"overseas\" + 0.004*\"positive\" + 0.004*\"insane\" + 0.004*\"tbf\"'),\n",
       " (1,\n",
       "  '0.019*\"bagchi\" + 0.018*\"thermobaric\" + 0.017*\"relative\" + 0.007*\"absolutely\" + 0.006*\"ukranian\" + 0.005*\"positive\" + 0.004*\"related\" + 0.004*\"articles\" + 0.004*\"threatening\" + 0.003*\"slang\"'),\n",
       " (2,\n",
       "  '0.056*\"thermobaric\" + 0.047*\"relative\" + 0.044*\"bagchi\" + 0.023*\"related\" + 0.015*\"mercilessly\" + 0.008*\"tbf\" + 0.006*\"una\" + 0.005*\"overseas\" + 0.005*\"idiot\" + 0.004*\"owns\"'),\n",
       " (3,\n",
       "  '0.057*\"thermobaric\" + 0.052*\"relative\" + 0.051*\"bagchi\" + 0.024*\"mercilessly\" + 0.016*\"related\" + 0.010*\"positive\" + 0.008*\"experts\" + 0.007*\"absolutely\" + 0.006*\"objects\" + 0.006*\"essential\"'),\n",
       " (4,\n",
       "  '0.053*\"relative\" + 0.051*\"thermobaric\" + 0.045*\"bagchi\" + 0.018*\"related\" + 0.016*\"mercilessly\" + 0.015*\"positive\" + 0.006*\"experts\" + 0.006*\"una\" + 0.006*\"absolutely\" + 0.005*\"tbf\"')]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LDA for num_topics = 5\n",
    "lda = models.LdaModel(corpus=corpus, id2word=id2word, num_topics=5, passes=10)\n",
    "lda.print_topics()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f962d538",
   "metadata": {
    "papermill": {
     "duration": 0.014596,
     "end_time": "2024-05-06T16:23:04.039465",
     "exception": false,
     "start_time": "2024-05-06T16:23:04.024869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Topic Modeling - Attempt #2 (Nouns Only)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "61829d01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:04.073040Z",
     "iopub.status.busy": "2024-05-06T16:23:04.072543Z",
     "iopub.status.idle": "2024-05-06T16:23:05.098400Z",
     "shell.execute_reply": "2024-05-06T16:23:05.097138Z"
    },
    "papermill": {
     "duration": 1.045929,
     "end_time": "2024-05-06T16:23:05.101274",
     "exception": false,
     "start_time": "2024-05-06T16:23:04.055345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /usr/share/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /usr/share/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package stopwords to /usr/share/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "acbbada3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:05.136268Z",
     "iopub.status.busy": "2024-05-06T16:23:05.135785Z",
     "iopub.status.idle": "2024-05-06T16:23:05.143491Z",
     "shell.execute_reply": "2024-05-06T16:23:05.142216Z"
    },
    "papermill": {
     "duration": 0.027737,
     "end_time": "2024-05-06T16:23:05.145897",
     "exception": false,
     "start_time": "2024-05-06T16:23:05.118160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Let's create a function to pull out nouns from a string of text\n",
    "\n",
    "from nltk import word_tokenize, pos_tag\n",
    "\n",
    "def nouns(text):\n",
    "    '''Given a string of text, tokenize the text and pull out only the nouns.'''\n",
    "    is_noun = lambda pos: pos[:2] == 'NN'\n",
    "    tokenized = word_tokenize(text)\n",
    "    all_nouns = [word for (word, pos) in pos_tag(tokenized) if is_noun(pos)]\n",
    "    return ' '.join(all_nouns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f4db837e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:05.178304Z",
     "iopub.status.busy": "2024-05-06T16:23:05.177868Z",
     "iopub.status.idle": "2024-05-06T16:23:06.174208Z",
     "shell.execute_reply": "2024-05-06T16:23:06.173133Z"
    },
    "papermill": {
     "duration": 1.015573,
     "end_time": "2024-05-06T16:23:06.176822",
     "exception": false,
     "start_time": "2024-05-06T16:23:05.161249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>date</th>\n",
       "      <th>cleaned_content</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>is that the same expensive and ineffective bor...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>expensive ineffective border wall smugglers br...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>so the americans are dressing up as russ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>americans dressing russians crossing russian b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>maybe if one military unit from ukraine crosse...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>maybe one military unit ukraine crossed border...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>volunteers cross polish border into ukraine to...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>volunteers cross polish border ukraine fight r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>but    theres no russian aircraft flying nea...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>theres russian aircraft flying near lviv carve...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284659</th>\n",
       "      <td>rusia wants to take back ukraine  they are our...</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>rusia wants take back ukraine allies guess gon...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284660</th>\n",
       "      <td>a positive for russia is that  according to us...</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>positive russia according ushakov biden pledge...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284661</th>\n",
       "      <td>resists  further invades  because already ...</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>resists invades already russia invaded waging ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284662</th>\n",
       "      <td>i fully support ukraine s sovereignty  but...</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>fully support ukraine sovereignty going war ru...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284663</th>\n",
       "      <td>biden warns putin   what does acting decisivel...</td>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>biden warns putin acting decisively even mean ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>272482 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  content        date  \\\n",
       "0       is that the same expensive and ineffective bor...  2022-03-05   \n",
       "1             so the americans are dressing up as russ...  2022-03-05   \n",
       "2       maybe if one military unit from ukraine crosse...  2022-03-05   \n",
       "3       volunteers cross polish border into ukraine to...  2022-03-05   \n",
       "4         but    theres no russian aircraft flying nea...  2022-03-05   \n",
       "...                                                   ...         ...   \n",
       "284659  rusia wants to take back ukraine  they are our...  2021-12-31   \n",
       "284660  a positive for russia is that  according to us...  2021-12-31   \n",
       "284661      resists  further invades  because already ...  2021-12-31   \n",
       "284662      i fully support ukraine s sovereignty  but...  2021-12-31   \n",
       "284663  biden warns putin   what does acting decisivel...  2021-12-31   \n",
       "\n",
       "                                          cleaned_content  \n",
       "0       expensive ineffective border wall smugglers br...  \n",
       "1       americans dressing russians crossing russian b...  \n",
       "2       maybe one military unit ukraine crossed border...  \n",
       "3       volunteers cross polish border ukraine fight r...  \n",
       "4       theres russian aircraft flying near lviv carve...  \n",
       "...                                                   ...  \n",
       "284659  rusia wants take back ukraine allies guess gon...  \n",
       "284660  positive russia according ushakov biden pledge...  \n",
       "284661  resists invades already russia invaded waging ...  \n",
       "284662  fully support ukraine sovereignty going war ru...  \n",
       "284663  biden warns putin acting decisively even mean ...  \n",
       "\n",
       "[272482 rows x 3 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read in the cleaned data, before the CountVectorizer step\n",
    "data_clean = pd.read_pickle('/kaggle/input/russia-and-ukraine/corpus_date_2.pkl')\n",
    "data_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2878cd03",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.209420Z",
     "iopub.status.busy": "2024-05-06T16:23:06.209000Z",
     "iopub.status.idle": "2024-05-06T16:23:06.214561Z",
     "shell.execute_reply": "2024-05-06T16:23:06.213436Z"
    },
    "papermill": {
     "duration": 0.02448,
     "end_time": "2024-05-06T16:23:06.216927",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.192447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_clean=data_clean.head(100)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e1c7f242",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.250250Z",
     "iopub.status.busy": "2024-05-06T16:23:06.249126Z",
     "iopub.status.idle": "2024-05-06T16:23:06.262400Z",
     "shell.execute_reply": "2024-05-06T16:23:06.261316Z"
    },
    "papermill": {
     "duration": 0.032306,
     "end_time": "2024-05-06T16:23:06.264800",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.232494",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>content</th>\n",
       "      <th>date</th>\n",
       "      <th>cleaned_content</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>is that the same expensive and ineffective bor...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>expensive ineffective border wall smugglers br...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>so the americans are dressing up as russ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>americans dressing russians crossing russian b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>maybe if one military unit from ukraine crosse...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>maybe one military unit ukraine crossed border...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>volunteers cross polish border into ukraine to...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>volunteers cross polish border ukraine fight r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>but    theres no russian aircraft flying nea...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>theres russian aircraft flying near lviv carve...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>ukraine help will come  but just asking   ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>ukraine help come asking students waiting long...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>steven seagal is willing to reboot footloose ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>steven seagal willing reboot footloose set rus...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>yesterday president zelenskyy said  immediate ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>yesterday president zelenskyy said immediate c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>graham     dated after the build up of some ...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>graham dated build russian troops border ukrai...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>to late to save the  or so cia biological weap...</td>\n",
       "      <td>2022-03-05</td>\n",
       "      <td>late save cia biological weapons labs inside u...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              content        date  \\\n",
       "0   is that the same expensive and ineffective bor...  2022-03-05   \n",
       "1         so the americans are dressing up as russ...  2022-03-05   \n",
       "2   maybe if one military unit from ukraine crosse...  2022-03-05   \n",
       "3   volunteers cross polish border into ukraine to...  2022-03-05   \n",
       "4     but    theres no russian aircraft flying nea...  2022-03-05   \n",
       "..                                                ...         ...   \n",
       "95      ukraine help will come  but just asking   ...  2022-03-05   \n",
       "96   steven seagal is willing to reboot footloose ...  2022-03-05   \n",
       "97  yesterday president zelenskyy said  immediate ...  2022-03-05   \n",
       "98    graham     dated after the build up of some ...  2022-03-05   \n",
       "99  to late to save the  or so cia biological weap...  2022-03-05   \n",
       "\n",
       "                                      cleaned_content  \n",
       "0   expensive ineffective border wall smugglers br...  \n",
       "1   americans dressing russians crossing russian b...  \n",
       "2   maybe one military unit ukraine crossed border...  \n",
       "3   volunteers cross polish border ukraine fight r...  \n",
       "4   theres russian aircraft flying near lviv carve...  \n",
       "..                                                ...  \n",
       "95  ukraine help come asking students waiting long...  \n",
       "96  steven seagal willing reboot footloose set rus...  \n",
       "97  yesterday president zelenskyy said immediate c...  \n",
       "98  graham dated build russian troops border ukrai...  \n",
       "99  late save cia biological weapons labs inside u...  \n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5603586f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.298282Z",
     "iopub.status.busy": "2024-05-06T16:23:06.297853Z",
     "iopub.status.idle": "2024-05-06T16:23:06.730874Z",
     "shell.execute_reply": "2024-05-06T16:23:06.729658Z"
    },
    "papermill": {
     "duration": 0.452778,
     "end_time": "2024-05-06T16:23:06.733474",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.280696",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cleaned_content</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>border wall smugglers times couple years rosed...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>americans russians border bombs equipment ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>unit border city putin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>volunteers border fight russian forces</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>theres aircraft carve zone ground poland borde...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>help students border months</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>reboot footloose border peace region story dan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>yesterday president zelenskyy closure skies st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>graham troops relevance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>weapons border putin sorry</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      cleaned_content\n",
       "0   border wall smugglers times couple years rosed...\n",
       "1   americans russians border bombs equipment ukraine\n",
       "2                              unit border city putin\n",
       "3              volunteers border fight russian forces\n",
       "4   theres aircraft carve zone ground poland borde...\n",
       "..                                                ...\n",
       "95                        help students border months\n",
       "96  reboot footloose border peace region story dan...\n",
       "97  yesterday president zelenskyy closure skies st...\n",
       "98                            graham troops relevance\n",
       "99                         weapons border putin sorry\n",
       "\n",
       "[100 rows x 1 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply the nouns function to the transcripts to filter only on nouns\n",
    "#nltk-->'punkt'\n",
    "data_nouns = pd.DataFrame(data_clean.cleaned_content.apply(nouns))\n",
    "data_nouns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0e29235e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.768041Z",
     "iopub.status.busy": "2024-05-06T16:23:06.767202Z",
     "iopub.status.idle": "2024-05-06T16:23:06.775014Z",
     "shell.execute_reply": "2024-05-06T16:23:06.773876Z"
    },
    "papermill": {
     "duration": 0.027852,
     "end_time": "2024-05-06T16:23:06.777477",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.749625",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create a new document-term matrix using only nouns\n",
    "from sklearn.feature_extraction import text\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "# Re-add the additional stop words since we are recreating the document-term matrix\n",
    "add_stop_words = ['like', 'im', 'know', 'just', 'dont', 'thats', 'right', 'people',\n",
    "                  'youre', 'got', 'gonna', 'time', 'think', 'yeah', 'said', 'and',\n",
    "                  'or', 'a', 'the', 'for', 'you']\n",
    "stop_words = text.ENGLISH_STOP_WORDS.union(add_stop_words)\n",
    "#stop_words = stopwords.words('english')\n",
    "# # Recreate a document-term matrix with only nouns\n",
    "# cvn = CountVectorizer(stop_words=list(stop_words))\n",
    "# data_cvn = cvn.fit_transform(data_nouns.cleaned_content)\n",
    "# data_dtmn = pd.DataFrame(data_cvn.toarray(), columns=cvn.get_feature_names_out())\n",
    "# data_dtmn.index = data_nouns.index\n",
    "# data_dtmn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bd957001",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.811689Z",
     "iopub.status.busy": "2024-05-06T16:23:06.811263Z",
     "iopub.status.idle": "2024-05-06T16:23:06.845446Z",
     "shell.execute_reply": "2024-05-06T16:23:06.844250Z"
    },
    "papermill": {
     "duration": 0.054644,
     "end_time": "2024-05-06T16:23:06.848222",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.793578",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abhinandan</th>\n",
       "      <th>ability</th>\n",
       "      <th>abortion</th>\n",
       "      <th>access</th>\n",
       "      <th>action</th>\n",
       "      <th>actor</th>\n",
       "      <th>administration</th>\n",
       "      <th>adults</th>\n",
       "      <th>aggression</th>\n",
       "      <th>agreement</th>\n",
       "      <th>...</th>\n",
       "      <th>year</th>\n",
       "      <th>years</th>\n",
       "      <th>yes</th>\n",
       "      <th>yesterday</th>\n",
       "      <th>yrs</th>\n",
       "      <th>zelensky</th>\n",
       "      <th>zelenskyy</th>\n",
       "      <th>zone</th>\n",
       "      <th>zones</th>\n",
       "      <th>zubrin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 507 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    abhinandan  ability  abortion  access  action  actor  administration  \\\n",
       "0            0        0         0       0       0      0               0   \n",
       "1            0        0         0       0       0      0               0   \n",
       "2            0        0         0       0       0      0               0   \n",
       "3            0        0         0       0       0      0               0   \n",
       "4            0        0         0       0       0      0               0   \n",
       "..         ...      ...       ...     ...     ...    ...             ...   \n",
       "95           0        0         0       0       0      0               0   \n",
       "96           0        0         0       0       0      0               0   \n",
       "97           0        0         0       0       0      0               0   \n",
       "98           0        0         0       0       0      0               0   \n",
       "99           0        0         0       0       0      0               0   \n",
       "\n",
       "    adults  aggression  agreement  ...  year  years  yes  yesterday  yrs  \\\n",
       "0        0           0          0  ...     0      1    0          0    0   \n",
       "1        0           0          0  ...     0      0    0          0    0   \n",
       "2        0           0          0  ...     0      0    0          0    0   \n",
       "3        0           0          0  ...     0      0    0          0    0   \n",
       "4        0           0          0  ...     0      0    0          0    0   \n",
       "..     ...         ...        ...  ...   ...    ...  ...        ...  ...   \n",
       "95       0           0          0  ...     0      0    0          0    0   \n",
       "96       0           0          0  ...     0      0    0          0    0   \n",
       "97       0           0          0  ...     0      0    0          1    0   \n",
       "98       0           0          0  ...     0      0    0          0    0   \n",
       "99       0           0          0  ...     0      0    0          0    0   \n",
       "\n",
       "    zelensky  zelenskyy  zone  zones  zubrin  \n",
       "0          0          0     0      0       0  \n",
       "1          0          0     0      0       0  \n",
       "2          0          0     0      0       0  \n",
       "3          0          0     0      0       0  \n",
       "4          0          0     1      0       0  \n",
       "..       ...        ...   ...    ...     ...  \n",
       "95         0          0     0      0       0  \n",
       "96         0          0     0      0       0  \n",
       "97         0          1     0      0       0  \n",
       "98         0          0     0      0       0  \n",
       "99         0          0     0      0       0  \n",
       "\n",
       "[100 rows x 507 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Recreate a document-term matrix with only nouns\n",
    "# cvn = CountVectorizer(stop_words=stop_words)\n",
    "cvn = CountVectorizer(stop_words=list(stop_words))\n",
    "data_cvn = cvn.fit_transform(data_nouns['cleaned_content'])\n",
    "data_dtmn = pd.DataFrame(data_cvn.toarray(), columns=cvn.get_feature_names_out())\n",
    "data_dtmn.index = data_nouns.index\n",
    "data_dtmn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "22ce71a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.884298Z",
     "iopub.status.busy": "2024-05-06T16:23:06.883815Z",
     "iopub.status.idle": "2024-05-06T16:23:06.892031Z",
     "shell.execute_reply": "2024-05-06T16:23:06.890903Z"
    },
    "papermill": {
     "duration": 0.029382,
     "end_time": "2024-05-06T16:23:06.894800",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.865418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    " #Create the gensim corpus\n",
    "corpusn = matutils.Sparse2Corpus(scipy.sparse.csr_matrix(data_dtmn.transpose()))\n",
    "\n",
    "# Create the vocabulary dictionary\n",
    "id2wordn = dict((v, k) for k, v in cvn.vocabulary_.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2f357644",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:06.931482Z",
     "iopub.status.busy": "2024-05-06T16:23:06.931039Z",
     "iopub.status.idle": "2024-05-06T16:23:07.755584Z",
     "shell.execute_reply": "2024-05-06T16:23:07.754510Z"
    },
    "papermill": {
     "duration": 0.846622,
     "end_time": "2024-05-06T16:23:07.758123",
     "exception": false,
     "start_time": "2024-05-06T16:23:06.911501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.050*\"border\" + 0.015*\"russia\" + 0.012*\"ukraine\" + 0.012*\"nato\" + 0.009*\"missiles\" + 0.007*\"place\" + 0.007*\"putin\" + 0.007*\"years\" + 0.007*\"yes\" + 0.007*\"problem\"'),\n",
       " (1,\n",
       "  '0.075*\"border\" + 0.023*\"russia\" + 0.020*\"putin\" + 0.016*\"forces\" + 0.016*\"troops\" + 0.013*\"ukraine\" + 0.010*\"war\" + 0.010*\"nato\" + 0.010*\"countries\" + 0.009*\"poland\"')]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's start with 2 topics\n",
    "ldan = models.LdaModel(corpus=corpusn, num_topics=2, id2word=id2wordn, passes=10)\n",
    "ldan.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d2540d8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:07.794641Z",
     "iopub.status.busy": "2024-05-06T16:23:07.793258Z",
     "iopub.status.idle": "2024-05-06T16:23:08.551293Z",
     "shell.execute_reply": "2024-05-06T16:23:08.550023Z"
    },
    "papermill": {
     "duration": 0.77928,
     "end_time": "2024-05-06T16:23:08.554270",
     "exception": false,
     "start_time": "2024-05-06T16:23:07.774990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.049*\"border\" + 0.023*\"nato\" + 0.022*\"troops\" + 0.022*\"russia\" + 0.012*\"putin\" + 0.011*\"ukraine\" + 0.009*\"poland\" + 0.009*\"aircraft\" + 0.009*\"bases\" + 0.009*\"europe\"'),\n",
       " (1,\n",
       "  '0.067*\"border\" + 0.028*\"russia\" + 0.014*\"students\" + 0.010*\"ukrainians\" + 0.008*\"ukraine\" + 0.008*\"country\" + 0.007*\"invasion\" + 0.007*\"equipment\" + 0.007*\"problem\" + 0.007*\"forces\"'),\n",
       " (2,\n",
       "  '0.075*\"border\" + 0.025*\"putin\" + 0.023*\"forces\" + 0.018*\"ukraine\" + 0.016*\"war\" + 0.013*\"russia\" + 0.010*\"countries\" + 0.010*\"russian\" + 0.010*\"amp\" + 0.010*\"nato\"')]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's try topics = 3\n",
    "ldan = models.LdaModel(corpus=corpusn, num_topics=3, id2word=id2wordn, passes=10)\n",
    "ldan.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4e88b78d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:08.590624Z",
     "iopub.status.busy": "2024-05-06T16:23:08.590206Z",
     "iopub.status.idle": "2024-05-06T16:23:09.293727Z",
     "shell.execute_reply": "2024-05-06T16:23:09.292482Z"
    },
    "papermill": {
     "duration": 0.724628,
     "end_time": "2024-05-06T16:23:09.296502",
     "exception": false,
     "start_time": "2024-05-06T16:23:08.571874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.067*\"border\" + 0.024*\"russia\" + 0.022*\"putin\" + 0.018*\"ukraine\" + 0.016*\"troops\" + 0.013*\"nato\" + 0.010*\"years\" + 0.010*\"missiles\" + 0.010*\"economy\" + 0.010*\"donbas\"'),\n",
       " (1,\n",
       "  '0.062*\"border\" + 0.027*\"russia\" + 0.022*\"nato\" + 0.020*\"putin\" + 0.014*\"poland\" + 0.014*\"students\" + 0.014*\"amp\" + 0.011*\"troops\" + 0.011*\"neighbor\" + 0.009*\"aircraft\"'),\n",
       " (2,\n",
       "  '0.079*\"border\" + 0.025*\"forces\" + 0.015*\"city\" + 0.013*\"russian\" + 0.012*\"ukraine\" + 0.011*\"russia\" + 0.010*\"kharkiv\" + 0.009*\"troops\" + 0.009*\"war\" + 0.008*\"country\"'),\n",
       " (3,\n",
       "  '0.051*\"border\" + 0.023*\"fight\" + 0.018*\"war\" + 0.016*\"invasion\" + 0.016*\"ukraine\" + 0.016*\"russia\" + 0.016*\"volunteers\" + 0.016*\"countries\" + 0.016*\"forces\" + 0.012*\"news\"')]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's try 4 topics\n",
    "ldan = models.LdaModel(corpus=corpusn, num_topics=4, id2word=id2wordn, passes=10)\n",
    "ldan.print_topics()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cabc7aaf",
   "metadata": {
    "papermill": {
     "duration": 0.017515,
     "end_time": "2024-05-06T16:23:09.331463",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.313948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Topic Modeling - Attempt #3 (Nouns and Adjectives)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f6ca85ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:09.369345Z",
     "iopub.status.busy": "2024-05-06T16:23:09.368921Z",
     "iopub.status.idle": "2024-05-06T16:23:09.375404Z",
     "shell.execute_reply": "2024-05-06T16:23:09.374330Z"
    },
    "papermill": {
     "duration": 0.028906,
     "end_time": "2024-05-06T16:23:09.377787",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.348881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Let's create a function to pull out nouns from a string of text\n",
    "def nouns_adj(text):\n",
    "    '''Given a string of text, tokenize the text and pull out only the nouns and adjectives.'''\n",
    "    is_noun_adj = lambda pos: pos[:2] == 'NN' or pos[:2] == 'JJ'\n",
    "    tokenized = word_tokenize(text)\n",
    "    nouns_adj = [word for (word, pos) in pos_tag(tokenized) if is_noun_adj(pos)]\n",
    "    return ' '.join(nouns_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7706faf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:09.414498Z",
     "iopub.status.busy": "2024-05-06T16:23:09.413450Z",
     "iopub.status.idle": "2024-05-06T16:23:09.688640Z",
     "shell.execute_reply": "2024-05-06T16:23:09.687532Z"
    },
    "papermill": {
     "duration": 0.29648,
     "end_time": "2024-05-06T16:23:09.691328",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.394848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cleaned_content</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>expensive ineffective border wall smugglers ti...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>americans russians russian border russian bomb...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>military unit ukraine border inialaited russia...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>volunteers polish border ukraine fight russian...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>theres russian aircraft lviv carve safe zone g...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>ukraine help students long russian military uk...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>steven seagal willing reboot footloose russian...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>yesterday president zelenskyy immediate closur...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>graham build russian troops ukraine relevance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>cia biological weapons ukraine russian border ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      cleaned_content\n",
       "0   expensive ineffective border wall smugglers ti...\n",
       "1   americans russians russian border russian bomb...\n",
       "2   military unit ukraine border inialaited russia...\n",
       "3   volunteers polish border ukraine fight russian...\n",
       "4   theres russian aircraft lviv carve safe zone g...\n",
       "..                                                ...\n",
       "95  ukraine help students long russian military uk...\n",
       "96  steven seagal willing reboot footloose russian...\n",
       "97  yesterday president zelenskyy immediate closur...\n",
       "98      graham build russian troops ukraine relevance\n",
       "99  cia biological weapons ukraine russian border ...\n",
       "\n",
       "[100 rows x 1 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply the nouns function to the transcripts to filter only on nouns\n",
    "data_nouns_adj = pd.DataFrame(data_clean.cleaned_content.apply(nouns_adj))\n",
    "data_nouns_adj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "ae8f0f31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:09.728498Z",
     "iopub.status.busy": "2024-05-06T16:23:09.728065Z",
     "iopub.status.idle": "2024-05-06T16:23:09.761246Z",
     "shell.execute_reply": "2024-05-06T16:23:09.759967Z"
    },
    "papermill": {
     "duration": 0.055097,
     "end_time": "2024-05-06T16:23:09.764092",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.708995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>abhinandan</th>\n",
       "      <th>ability</th>\n",
       "      <th>able</th>\n",
       "      <th>abortion</th>\n",
       "      <th>access</th>\n",
       "      <th>acting</th>\n",
       "      <th>action</th>\n",
       "      <th>actor</th>\n",
       "      <th>administration</th>\n",
       "      <th>adults</th>\n",
       "      <th>...</th>\n",
       "      <th>year</th>\n",
       "      <th>years</th>\n",
       "      <th>yes</th>\n",
       "      <th>yesterday</th>\n",
       "      <th>yrs</th>\n",
       "      <th>zelensky</th>\n",
       "      <th>zelenskyy</th>\n",
       "      <th>zone</th>\n",
       "      <th>zones</th>\n",
       "      <th>zubrin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 669 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    abhinandan  ability  able  abortion  access  acting  action  actor  \\\n",
       "0            0        0     0         0       0       0       0      0   \n",
       "1            0        0     0         0       0       0       0      0   \n",
       "2            0        0     0         0       0       0       0      0   \n",
       "3            0        0     0         0       0       0       0      0   \n",
       "4            0        0     0         0       0       0       0      0   \n",
       "..         ...      ...   ...       ...     ...     ...     ...    ...   \n",
       "95           0        0     0         0       0       0       0      0   \n",
       "96           0        0     0         0       0       0       0      0   \n",
       "97           0        0     0         0       0       0       0      0   \n",
       "98           0        0     0         0       0       0       0      0   \n",
       "99           0        0     0         0       0       0       0      0   \n",
       "\n",
       "    administration  adults  ...  year  years  yes  yesterday  yrs  zelensky  \\\n",
       "0                0       0  ...     0      1    0          0    0         0   \n",
       "1                0       0  ...     0      0    0          0    0         0   \n",
       "2                0       0  ...     0      0    0          0    0         0   \n",
       "3                0       0  ...     0      0    0          0    0         0   \n",
       "4                0       0  ...     0      0    0          0    0         0   \n",
       "..             ...     ...  ...   ...    ...  ...        ...  ...       ...   \n",
       "95               0       0  ...     0      0    0          0    0         0   \n",
       "96               0       0  ...     0      0    0          0    0         0   \n",
       "97               0       0  ...     0      0    0          1    0         0   \n",
       "98               0       0  ...     0      0    0          0    0         0   \n",
       "99               0       0  ...     0      0    0          0    0         0   \n",
       "\n",
       "    zelenskyy  zone  zones  zubrin  \n",
       "0           0     0      0       0  \n",
       "1           0     0      0       0  \n",
       "2           0     0      0       0  \n",
       "3           0     0      0       0  \n",
       "4           0     1      0       0  \n",
       "..        ...   ...    ...     ...  \n",
       "95          0     0      0       0  \n",
       "96          0     0      0       0  \n",
       "97          1     0      0       0  \n",
       "98          0     0      0       0  \n",
       "99          0     0      0       0  \n",
       "\n",
       "[100 rows x 669 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a new document-term matrix using only nouns and adjectives, also remove common words with max_df\n",
    "cvna = CountVectorizer(stop_words=list(stop_words), max_df=.8)\n",
    "data_cvna = cvna.fit_transform(data_nouns_adj.cleaned_content)\n",
    "data_dtmna = pd.DataFrame(data_cvna.toarray(), columns=cvna.get_feature_names_out())\n",
    "data_dtmna.index = data_nouns_adj.index\n",
    "data_dtmna"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e51bc7e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:09.868944Z",
     "iopub.status.busy": "2024-05-06T16:23:09.868511Z",
     "iopub.status.idle": "2024-05-06T16:23:09.876371Z",
     "shell.execute_reply": "2024-05-06T16:23:09.875306Z"
    },
    "papermill": {
     "duration": 0.030022,
     "end_time": "2024-05-06T16:23:09.878846",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.848824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the gensim corpus\n",
    "corpusna = matutils.Sparse2Corpus(scipy.sparse.csr_matrix(data_dtmna.transpose()))\n",
    "\n",
    "# Create the vocabulary dictionary\n",
    "id2wordna = dict((v, k) for k, v in cvna.vocabulary_.items())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2798e149",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:09.917646Z",
     "iopub.status.busy": "2024-05-06T16:23:09.916797Z",
     "iopub.status.idle": "2024-05-06T16:23:10.700987Z",
     "shell.execute_reply": "2024-05-06T16:23:10.699787Z"
    },
    "papermill": {
     "duration": 0.806345,
     "end_time": "2024-05-06T16:23:10.703479",
     "exception": false,
     "start_time": "2024-05-06T16:23:09.897134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.026*\"nato\" + 0.019*\"russia\" + 0.017*\"putin\" + 0.008*\"ukrainian\" + 0.008*\"countries\" + 0.007*\"students\" + 0.007*\"military\" + 0.006*\"amp\" + 0.006*\"polish\" + 0.006*\"country\"'),\n",
       " (1,\n",
       "  '0.017*\"russia\" + 0.016*\"troops\" + 0.016*\"forces\" + 0.012*\"nato\" + 0.010*\"putin\" + 0.009*\"fight\" + 0.008*\"invasion\" + 0.008*\"stop\" + 0.007*\"war\" + 0.007*\"poland\"')]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's start with 2 topics\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=2, id2word=id2wordna, passes=10)\n",
    "ldana.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b3e81c83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:10.742302Z",
     "iopub.status.busy": "2024-05-06T16:23:10.741575Z",
     "iopub.status.idle": "2024-05-06T16:23:11.526234Z",
     "shell.execute_reply": "2024-05-06T16:23:11.525095Z"
    },
    "papermill": {
     "duration": 0.807054,
     "end_time": "2024-05-06T16:23:11.528914",
     "exception": false,
     "start_time": "2024-05-06T16:23:10.721860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.025*\"russia\" + 0.015*\"troops\" + 0.013*\"putin\" + 0.012*\"forces\" + 0.012*\"fight\" + 0.010*\"stop\" + 0.010*\"polish\" + 0.009*\"war\" + 0.007*\"city\" + 0.007*\"invasion\"'),\n",
       " (1,\n",
       "  '0.019*\"russia\" + 0.012*\"nato\" + 0.011*\"missiles\" + 0.009*\"forces\" + 0.009*\"putin\" + 0.007*\"russians\" + 0.007*\"amp\" + 0.007*\"cia\" + 0.007*\"west\" + 0.007*\"new\"'),\n",
       " (2,\n",
       "  '0.039*\"nato\" + 0.018*\"putin\" + 0.010*\"students\" + 0.009*\"amp\" + 0.009*\"ukrainian\" + 0.009*\"forces\" + 0.009*\"countries\" + 0.009*\"russia\" + 0.008*\"fly\" + 0.007*\"poland\"')]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's try 3 topics\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=3, id2word=id2wordna, passes=10)\n",
    "ldana.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b8bec524",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:11.568373Z",
     "iopub.status.busy": "2024-05-06T16:23:11.567442Z",
     "iopub.status.idle": "2024-05-06T16:23:12.255828Z",
     "shell.execute_reply": "2024-05-06T16:23:12.254717Z"
    },
    "papermill": {
     "duration": 0.710915,
     "end_time": "2024-05-06T16:23:12.258402",
     "exception": false,
     "start_time": "2024-05-06T16:23:11.547487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.035*\"nato\" + 0.023*\"russia\" + 0.015*\"putin\" + 0.014*\"forces\" + 0.012*\"amp\" + 0.010*\"ukrainian\" + 0.010*\"war\" + 0.010*\"students\" + 0.010*\"troops\" + 0.009*\"countries\"'),\n",
       " (1,\n",
       "  '0.014*\"nato\" + 0.012*\"city\" + 0.012*\"russia\" + 0.010*\"forces\" + 0.010*\"stop\" + 0.010*\"putin\" + 0.007*\"new\" + 0.007*\"kharkiv\" + 0.007*\"nuclear\" + 0.007*\"ready\"'),\n",
       " (2,\n",
       "  '0.024*\"russia\" + 0.009*\"economy\" + 0.009*\"live\" + 0.007*\"troops\" + 0.007*\"problem\" + 0.007*\"invasion\" + 0.006*\"russians\" + 0.006*\"possible\" + 0.006*\"map\" + 0.006*\"bases\"'),\n",
       " (3,\n",
       "  '0.021*\"polish\" + 0.021*\"putin\" + 0.021*\"fight\" + 0.013*\"troops\" + 0.011*\"poland\" + 0.011*\"russia\" + 0.011*\"volunteers\" + 0.011*\"forces\" + 0.008*\"place\" + 0.008*\"countries\"')]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's try 4 topics\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=4, id2word=id2wordna, passes=10)\n",
    "ldana.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "91b14c4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:12.297470Z",
     "iopub.status.busy": "2024-05-06T16:23:12.297043Z",
     "iopub.status.idle": "2024-05-06T16:23:16.706747Z",
     "shell.execute_reply": "2024-05-06T16:23:16.705501Z"
    },
    "papermill": {
     "duration": 4.432475,
     "end_time": "2024-05-06T16:23:16.709433",
     "exception": false,
     "start_time": "2024-05-06T16:23:12.276958",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 1: 0.039*\"russia\" + 0.014*\"nato\" + 0.013*\"poland\" + 0.011*\"war\" + 0.010*\"troops\" + 0.009*\"countries\" + 0.007*\"russians\" + 0.007*\"help\" + 0.007*\"fight\" + 0.007*\"donbas\"\n",
      "Topic 2: 0.023*\"forces\" + 0.013*\"fight\" + 0.011*\"ukrainian\" + 0.011*\"volunteers\" + 0.011*\"polish\" + 0.008*\"news\" + 0.008*\"amp\" + 0.008*\"victory\" + 0.008*\"peace\" + 0.008*\"labs\"\n",
      "Topic 3: 0.039*\"putin\" + 0.035*\"nato\" + 0.022*\"russia\" + 0.009*\"polish\" + 0.009*\"military\" + 0.009*\"countries\" + 0.007*\"ukrainians\" + 0.007*\"neighbor\" + 0.007*\"students\" + 0.007*\"nuclear\"\n",
      "Topic 4: 0.018*\"nato\" + 0.014*\"troops\" + 0.014*\"forces\" + 0.011*\"city\" + 0.011*\"invasion\" + 0.011*\"amp\" + 0.009*\"fly\" + 0.009*\"ukrainian\" + 0.009*\"new\" + 0.009*\"putin\"\n"
     ]
    }
   ],
   "source": [
    "# Our final LDA model (for now)\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=4, id2word=id2wordna, passes=80)\n",
    "for idx, topic in ldana.print_topics(-1):\n",
    "    print(\"Topic {}: {}\".format(idx + 1, topic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0646b84d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:16.749565Z",
     "iopub.status.busy": "2024-05-06T16:23:16.748721Z",
     "iopub.status.idle": "2024-05-06T16:23:20.934278Z",
     "shell.execute_reply": "2024-05-06T16:23:20.933068Z"
    },
    "papermill": {
     "duration": 4.208412,
     "end_time": "2024-05-06T16:23:20.936914",
     "exception": false,
     "start_time": "2024-05-06T16:23:16.728502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 1: 0.045*\"putin\" + 0.045*\"nato\" + 0.015*\"military\" + 0.010*\"poland\" + 0.010*\"neighbor\" + 0.010*\"excuse\" + 0.010*\"countries\" + 0.010*\"afraid\" + 0.010*\"membership\" + 0.010*\"sense\"\n",
      "Topic 2: 0.023*\"polish\" + 0.020*\"forces\" + 0.013*\"amp\" + 0.013*\"volunteers\" + 0.013*\"fight\" + 0.010*\"missiles\" + 0.010*\"news\" + 0.010*\"stop\" + 0.010*\"anti\" + 0.010*\"russia\"\n",
      "Topic 3: 0.025*\"russia\" + 0.015*\"students\" + 0.011*\"ukrainian\" + 0.008*\"help\" + 0.008*\"problem\" + 0.008*\"invasion\" + 0.008*\"asylum\" + 0.008*\"possible\" + 0.008*\"combat\" + 0.008*\"economy\"\n",
      "Topic 4: 0.018*\"russia\" + 0.013*\"troops\" + 0.013*\"forces\" + 0.011*\"invasion\" + 0.011*\"amp\" + 0.008*\"war\" + 0.008*\"country\" + 0.008*\"yes\" + 0.008*\"military\" + 0.008*\"nato\"\n",
      "Topic 5: 0.026*\"russia\" + 0.022*\"nato\" + 0.016*\"troops\" + 0.011*\"war\" + 0.011*\"countries\" + 0.009*\"poland\" + 0.009*\"city\" + 0.009*\"fight\" + 0.009*\"ukrainian\" + 0.009*\"kharkiv\"\n"
     ]
    }
   ],
   "source": [
    "# Our final LDA model (for now)\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=5, id2word=id2wordna, passes=80)\n",
    "for idx, topic in ldana.print_topics(-1):\n",
    "    print(\"Topic {}: {}\".format(idx + 1, topic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "810ad102",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:20.978262Z",
     "iopub.status.busy": "2024-05-06T16:23:20.977808Z",
     "iopub.status.idle": "2024-05-06T16:23:21.984276Z",
     "shell.execute_reply": "2024-05-06T16:23:21.983160Z"
    },
    "papermill": {
     "duration": 1.030806,
     "end_time": "2024-05-06T16:23:21.986840",
     "exception": false,
     "start_time": "2024-05-06T16:23:20.956034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define function to plot topics as bar plots with legends\n",
    "def plot_topics(lda_model):\n",
    "    fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 8), sharex=True)\n",
    "    axes = axes.flatten()\n",
    "    for idx, ax in enumerate(axes):\n",
    "        topic = lda_model.show_topic(idx, topn=10)\n",
    "        topic_words = [word for word, _ in topic]\n",
    "        topic_probs = [prob for _, prob in topic]\n",
    "        ax.barh(topic_words, topic_probs, color='skyblue', label='Word Probability')\n",
    "        ax.set_title(f'Topic {idx + 1}', fontsize=12)\n",
    "        ax.invert_yaxis()\n",
    "        ax.tick_params(axis='both', which='major', labelsize=10)\n",
    "        ax.legend(loc='lower right', fontsize=8)\n",
    "        for i in 'top right left'.split():\n",
    "            ax.spines[i].set_visible(False)\n",
    "        fig.suptitle('Top 10 words for each topic', fontsize=14)\n",
    "        plt.subplots_adjust(top=0.9, bottom=0.1, wspace=0.3, hspace=0.4)\n",
    "\n",
    "# Call the function to plot topics for your LDA model\n",
    "plot_topics(ldana)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4b38689d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:22.030178Z",
     "iopub.status.busy": "2024-05-06T16:23:22.029755Z",
     "iopub.status.idle": "2024-05-06T16:23:22.068747Z",
     "shell.execute_reply": "2024-05-06T16:23:22.067514Z"
    },
    "papermill": {
     "duration": 0.063797,
     "end_time": "2024-05-06T16:23:22.071250",
     "exception": false,
     "start_time": "2024-05-06T16:23:22.007453",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 1: 0.045*\"putin\" + 0.045*\"nato\" + 0.015*\"military\" + 0.010*\"poland\" + 0.010*\"neighbor\" + 0.010*\"excuse\" + 0.010*\"countries\" + 0.010*\"afraid\" + 0.010*\"membership\" + 0.010*\"sense\"\n",
      "Topic 2: 0.023*\"polish\" + 0.020*\"forces\" + 0.013*\"amp\" + 0.013*\"volunteers\" + 0.013*\"fight\" + 0.010*\"missiles\" + 0.010*\"news\" + 0.010*\"stop\" + 0.010*\"anti\" + 0.010*\"russia\"\n",
      "Topic 3: 0.025*\"russia\" + 0.015*\"students\" + 0.011*\"ukrainian\" + 0.008*\"help\" + 0.008*\"problem\" + 0.008*\"invasion\" + 0.008*\"asylum\" + 0.008*\"possible\" + 0.008*\"combat\" + 0.008*\"economy\"\n",
      "Topic 4: 0.018*\"russia\" + 0.013*\"troops\" + 0.013*\"forces\" + 0.011*\"invasion\" + 0.011*\"amp\" + 0.008*\"war\" + 0.008*\"country\" + 0.008*\"yes\" + 0.008*\"military\" + 0.008*\"nato\"\n",
      "Topic 5: 0.026*\"russia\" + 0.022*\"nato\" + 0.016*\"troops\" + 0.011*\"war\" + 0.011*\"countries\" + 0.009*\"poland\" + 0.009*\"city\" + 0.009*\"fight\" + 0.009*\"ukrainian\" + 0.009*\"kharkiv\"\n"
     ]
    }
   ],
   "source": [
    "# Let's take a look at which topics each tweet contains\n",
    "corpus_transformed = ldana[corpusna]\n",
    "\n",
    "# Unpack the values from corpus_transformed\n",
    "topics_per_transcript = [[a for (a, b) in doc] for doc in corpus_transformed]\n",
    "\n",
    "# Combine with transcript indices\n",
    "topics_with_indices = list(zip(topics_per_transcript, data_dtmna.index))\n",
    "\n",
    "# Print the result\n",
    "for idx, topic in ldana.print_topics(-1):\n",
    "     print(\"Topic {}: {}\".format(idx + 1, topic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6f8c7172",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:22.113289Z",
     "iopub.status.busy": "2024-05-06T16:23:22.112870Z",
     "iopub.status.idle": "2024-05-06T16:23:22.153629Z",
     "shell.execute_reply": "2024-05-06T16:23:22.152434Z"
    },
    "papermill": {
     "duration": 0.064934,
     "end_time": "2024-05-06T16:23:22.156263",
     "exception": false,
     "start_time": "2024-05-06T16:23:22.091329",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(2, 0),\n",
       " (0, 1),\n",
       " (0, 2),\n",
       " (1, 3),\n",
       " (4, 4),\n",
       " (4, 5),\n",
       " (4, 6),\n",
       " (4, 7),\n",
       " (1, 8),\n",
       " (0, 9),\n",
       " (3, 10),\n",
       " (1, 11),\n",
       " (4, 12),\n",
       " (2, 13),\n",
       " (4, 14),\n",
       " (0, 15),\n",
       " (0, 16),\n",
       " (2, 17),\n",
       " (1, 18),\n",
       " (1, 19),\n",
       " (3, 20),\n",
       " (0, 21),\n",
       " (3, 22),\n",
       " (1, 23),\n",
       " (2, 24),\n",
       " (1, 25),\n",
       " (4, 26),\n",
       " (4, 27),\n",
       " (1, 28),\n",
       " (4, 29),\n",
       " (2, 30),\n",
       " (3, 31),\n",
       " (3, 32),\n",
       " (0, 33),\n",
       " (2, 34),\n",
       " (3, 35),\n",
       " (4, 36),\n",
       " (4, 37),\n",
       " (1, 38),\n",
       " (4, 39),\n",
       " (3, 40),\n",
       " (3, 41),\n",
       " (4, 42),\n",
       " (3, 43),\n",
       " (0, 44),\n",
       " (4, 45),\n",
       " (4, 46),\n",
       " (3, 47),\n",
       " (4, 48),\n",
       " (0, 49),\n",
       " (4, 50),\n",
       " (0, 51),\n",
       " (0, 52),\n",
       " (1, 53),\n",
       " (1, 54),\n",
       " (1, 55),\n",
       " (3, 56),\n",
       " (2, 57),\n",
       " (4, 58),\n",
       " (1, 59),\n",
       " (3, 60),\n",
       " (0, 61),\n",
       " (3, 62),\n",
       " (1, 63),\n",
       " (3, 64),\n",
       " (1, 65),\n",
       " (2, 66),\n",
       " (4, 67),\n",
       " (1, 68),\n",
       " (2, 69),\n",
       " (4, 70),\n",
       " (3, 71),\n",
       " (3, 72),\n",
       " (1, 73),\n",
       " (1, 74),\n",
       " (1, 75),\n",
       " (4, 76),\n",
       " (4, 77),\n",
       " (0, 78),\n",
       " (2, 79),\n",
       " (0, 80),\n",
       " (2, 81),\n",
       " (2, 82),\n",
       " (3, 83),\n",
       " (4, 84),\n",
       " (0, 85),\n",
       " (0, 86),\n",
       " (0, 87),\n",
       " (4, 88),\n",
       " (3, 89),\n",
       " (1, 90),\n",
       " (3, 91),\n",
       " (4, 92),\n",
       " (3, 93),\n",
       " (3, 94),\n",
       " (0, 95),\n",
       " (4, 96),\n",
       " (4, 97),\n",
       " (3, 98),\n",
       " (0, 99)]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's take a look at which topics each transcript contains\n",
    "topics_per_document = []\n",
    "for doc_topics in corpus_transformed:\n",
    "    doc_topics = sorted(doc_topics, key=lambda x: x[1], reverse=True)\n",
    "    dominant_topic = doc_topics[0][0]\n",
    "    topics_per_document.append(dominant_topic)\n",
    "\n",
    "# Pair each document's index with its assigned topic\n",
    "topics_with_documents = list(zip(topics_per_document, data_dtmna.index))\n",
    "topics_with_documents\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f7dfd1a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:22.199330Z",
     "iopub.status.busy": "2024-05-06T16:23:22.198232Z",
     "iopub.status.idle": "2024-05-06T16:23:24.839989Z",
     "shell.execute_reply": "2024-05-06T16:23:24.838583Z"
    },
    "papermill": {
     "duration": 2.666229,
     "end_time": "2024-05-06T16:23:24.842702",
     "exception": false,
     "start_time": "2024-05-06T16:23:22.176473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 1: 0.013*\"putin\" + 0.013*\"poland\" + 0.013*\"lethal\" + 0.013*\"aid\" + 0.009*\"equipment\" + 0.009*\"problem\" + 0.009*\"place\" + 0.009*\"issue\" + 0.009*\"ukranians\" + 0.009*\"damage\"\n",
      "Topic 2: 0.040*\"russia\" + 0.018*\"nato\" + 0.014*\"air\" + 0.011*\"live\" + 0.008*\"country\" + 0.007*\"fly\" + 0.007*\"yes\" + 0.007*\"nuclear\" + 0.007*\"cross\" + 0.007*\"years\"\n",
      "Topic 3: 0.029*\"polish\" + 0.019*\"nato\" + 0.016*\"troops\" + 0.016*\"forces\" + 0.013*\"military\" + 0.013*\"war\" + 0.013*\"volunteers\" + 0.013*\"fight\" + 0.013*\"russia\" + 0.010*\"long\"\n",
      "Topic 4: 0.024*\"russia\" + 0.020*\"nato\" + 0.014*\"stop\" + 0.010*\"war\" + 0.010*\"students\" + 0.010*\"forces\" + 0.010*\"ukrainian\" + 0.010*\"soviet\" + 0.010*\"labs\" + 0.010*\"bio\"\n",
      "Topic 5: 0.023*\"troops\" + 0.022*\"amp\" + 0.020*\"russia\" + 0.015*\"eastern\" + 0.015*\"putin\" + 0.012*\"ukrainians\" + 0.008*\"cia\" + 0.008*\"russians\" + 0.008*\"invasion\" + 0.008*\"city\"\n",
      "Topic 6: 0.039*\"nato\" + 0.028*\"putin\" + 0.020*\"forces\" + 0.014*\"countries\" + 0.012*\"new\" + 0.012*\"ukrainian\" + 0.012*\"kharkiv\" + 0.009*\"city\" + 0.009*\"neighbor\" + 0.009*\"fight\"\n"
     ]
    }
   ],
   "source": [
    "#Part 1\n",
    "ldana = models.LdaModel(corpus=corpusna, num_topics=6, id2word=id2wordna, passes=50)\n",
    "for idx, topic in ldana.print_topics(-1):\n",
    "     print(\"Topic {}: {}\".format(idx + 1, topic))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b1fab35a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-06T16:23:24.885523Z",
     "iopub.status.busy": "2024-05-06T16:23:24.885050Z",
     "iopub.status.idle": "2024-05-06T16:23:25.632963Z",
     "shell.execute_reply": "2024-05-06T16:23:25.631503Z"
    },
    "papermill": {
     "duration": 0.772464,
     "end_time": "2024-05-06T16:23:25.635757",
     "exception": false,
     "start_time": "2024-05-06T16:23:24.863293",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Topic 1: 0.013*\"putin\" + 0.013*\"poland\" + 0.013*\"lethal\" + 0.013*\"aid\" + 0.009*\"equipment\" + 0.009*\"problem\" + 0.009*\"place\" + 0.009*\"issue\" + 0.009*\"ukranians\" + 0.009*\"damage\"\n",
      "Topic 2: 0.040*\"russia\" + 0.018*\"nato\" + 0.014*\"air\" + 0.011*\"live\" + 0.008*\"country\" + 0.007*\"fly\" + 0.007*\"yes\" + 0.007*\"nuclear\" + 0.007*\"cross\" + 0.007*\"years\"\n",
      "Topic 3: 0.029*\"polish\" + 0.019*\"nato\" + 0.016*\"troops\" + 0.016*\"forces\" + 0.013*\"military\" + 0.013*\"war\" + 0.013*\"volunteers\" + 0.013*\"fight\" + 0.013*\"russia\" + 0.010*\"long\"\n",
      "Topic 4: 0.024*\"russia\" + 0.020*\"nato\" + 0.014*\"stop\" + 0.010*\"war\" + 0.010*\"students\" + 0.010*\"forces\" + 0.010*\"ukrainian\" + 0.010*\"soviet\" + 0.010*\"labs\" + 0.010*\"bio\"\n",
      "Topic 5: 0.023*\"troops\" + 0.022*\"amp\" + 0.020*\"russia\" + 0.015*\"eastern\" + 0.015*\"putin\" + 0.012*\"ukrainians\" + 0.008*\"cia\" + 0.008*\"russians\" + 0.008*\"invasion\" + 0.008*\"city\"\n",
      "Topic 6: 0.039*\"nato\" + 0.028*\"putin\" + 0.020*\"forces\" + 0.014*\"countries\" + 0.012*\"new\" + 0.012*\"ukrainian\" + 0.012*\"kharkiv\" + 0.009*\"city\" + 0.009*\"neighbor\" + 0.009*\"fight\"\n"
     ]
    }
   ],
   "source": [
    "#part 2\n",
    "# Function to tokenize and filter for verbs\n",
    "def verb(text):\n",
    "    '''Given a string of text, tokenize the text and pull out only the verbs.'''\n",
    "    is_verb = lambda pos: pos[:2] == 'VB'\n",
    "    tokenized = word_tokenize(text)\n",
    "    all_verb = [word for (word, pos) in pos_tag(tokenized) if is_verb(pos)]\n",
    "    return ' '.join(all_verb)\n",
    "\n",
    "# Apply the nouns function to the transcripts to filter only on nouns\n",
    "data_verb = pd.DataFrame(data_clean.cleaned_content.apply(verb))\n",
    "data_verb\n",
    "\n",
    "# Create a new document-term matrix using only nouns, adjectives, and verbs, also remove common words with max_df\n",
    "cvna = CountVectorizer(stop_words=list(stop_words), max_df=.8)\n",
    "data_cvna = cvna.fit_transform(data_verb.cleaned_content)\n",
    "data_dtmna = pd.DataFrame(data_cvna.toarray(), columns=cvna.get_feature_names_out())\n",
    "data_dtmna.index = data_verb.index\n",
    "\n",
    "# Create the gensim corpus\n",
    "corpus_verb = matutils.Sparse2Corpus(scipy.sparse.csr_matrix(data_dtmna.transpose()))\n",
    "\n",
    "# Create the vocabulary dictionary\n",
    "id2word_verb = dict((v, k) for k, v in cvna.vocabulary_.items())\n",
    "\n",
    "# Attempt LDA with verbs\n",
    "lda_verb = models.LdaModel(corpus=corpus_verb, num_topics=4, id2word=id2word_verb, passes=10)\n",
    "for idx, topic in ldana.print_topics(-1):\n",
    "    print(\"Topic {}: {}\".format(idx + 1, topic))"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4925501,
     "sourceId": 8291415,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4926290,
     "sourceId": 8292530,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 142.875455,
   "end_time": "2024-05-06T16:23:26.780277",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-06T16:21:03.904822",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "883bbca7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:19:50.185912Z",
     "iopub.status.busy": "2024-04-19T19:19:50.185469Z",
     "iopub.status.idle": "2024-04-19T19:19:51.075400Z",
     "shell.execute_reply": "2024-04-19T19:19:51.074260Z"
    },
    "papermill": {
     "duration": 0.90507,
     "end_time": "2024-04-19T19:19:51.078371",
     "exception": false,
     "start_time": "2024-04-19T19:19:50.173301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Russia_invade.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Russian_border_Ukraine.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Ukraine_nato.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Ukraine_troops.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Russian_troops.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Ukraine_border.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/StandWithUkraine.csv\n",
      "/kaggle/input/ukraine-war-tweets-dataset-65-days/Ukraine_war.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a9e71ad2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:19:51.100655Z",
     "iopub.status.busy": "2024-04-19T19:19:51.100072Z",
     "iopub.status.idle": "2024-04-19T19:20:07.447958Z",
     "shell.execute_reply": "2024-04-19T19:20:07.446857Z"
    },
    "papermill": {
     "duration": 16.361859,
     "end_time": "2024-04-19T19:20:07.450566",
     "exception": false,
     "start_time": "2024-04-19T19:19:51.088707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting twython\r\n",
      "  Downloading twython-3.9.1-py3-none-any.whl.metadata (20 kB)\r\n",
      "Requirement already satisfied: requests>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from twython) (2.31.0)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from twython) (1.3.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests>=2.1.0->twython) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests>=2.1.0->twython) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests>=2.1.0->twython) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests>=2.1.0->twython) (2024.2.2)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.4.0->twython) (3.2.2)\r\n",
      "Downloading twython-3.9.1-py3-none-any.whl (33 kB)\r\n",
      "Installing collected packages: twython\r\n",
      "Successfully installed twython-3.9.1\r\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install twython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "74643faf",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:07.476590Z",
     "iopub.status.busy": "2024-04-19T19:20:07.476177Z",
     "iopub.status.idle": "2024-04-19T19:20:10.074574Z",
     "shell.execute_reply": "2024-04-19T19:20:10.073725Z"
    },
    "papermill": {
     "duration": 2.615311,
     "end_time": "2024-04-19T19:20:10.077168",
     "exception": false,
     "start_time": "2024-04-19T19:20:07.461857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from textblob import TextBlob\n",
    "import sys\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import nltk\n",
    "import re\n",
    "import string\n",
    "import seaborn as sns\n",
    " \n",
    " \n",
    "from PIL import Image\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from nltk.stem import SnowballStemmer\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d27e07d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:10.101234Z",
     "iopub.status.busy": "2024-04-19T19:20:10.100099Z",
     "iopub.status.idle": "2024-04-19T19:20:30.936159Z",
     "shell.execute_reply": "2024-04-19T19:20:30.935002Z"
    },
    "papermill": {
     "duration": 20.85079,
     "end_time": "2024-04-19T19:20:30.939038",
     "exception": false,
     "start_time": "2024-04-19T19:20:10.088248",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "tweets1=pd.read_csv('/kaggle/input/ukraine-war-tweets-dataset-65-days/Russian_border_Ukraine.csv')\n",
    "tweets2=pd.read_csv('/kaggle/input/ukraine-war-tweets-dataset-65-days/Ukraine_war.csv')\n",
    "tweets=pd.concat([tweets1, tweets2], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "122da97d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:30.963616Z",
     "iopub.status.busy": "2024-04-19T19:20:30.962446Z",
     "iopub.status.idle": "2024-04-19T19:20:31.002458Z",
     "shell.execute_reply": "2024-04-19T19:20:31.001309Z"
    },
    "papermill": {
     "duration": 0.05438,
     "end_time": "2024-04-19T19:20:31.004742",
     "exception": false,
     "start_time": "2024-04-19T19:20:30.950362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_type</th>\n",
       "      <th>url</th>\n",
       "      <th>date</th>\n",
       "      <th>content</th>\n",
       "      <th>renderedContent</th>\n",
       "      <th>id</th>\n",
       "      <th>user</th>\n",
       "      <th>replyCount</th>\n",
       "      <th>retweetCount</th>\n",
       "      <th>likeCount</th>\n",
       "      <th>...</th>\n",
       "      <th>retweetedTweet</th>\n",
       "      <th>quotedTweet</th>\n",
       "      <th>inReplyToTweetId</th>\n",
       "      <th>inReplyToUser</th>\n",
       "      <th>mentionedUsers</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>place</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>cashtags</th>\n",
       "      <th>Searh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/donveach/status/1500259722...</td>\n",
       "      <td>2022-03-05 23:59:25+00:00</td>\n",
       "      <td>Is that the same expensive and ineffective bor...</td>\n",
       "      <td>Is that the same expensive and ineffective bor...</td>\n",
       "      <td>1500259722112520194</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.Tweet', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/deliveryman199/status/1500...</td>\n",
       "      <td>2022-03-05 23:58:30+00:00</td>\n",
       "      <td>@DonWaifu @gabehayes @aaronjmate So the Americ...</td>\n",
       "      <td>@DonWaifu @gabehayes @aaronjmate So the Americ...</td>\n",
       "      <td>1500259491232641025</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.500251e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/JDiozzi/status/15002591158...</td>\n",
       "      <td>2022-03-05 23:57:01+00:00</td>\n",
       "      <td>Maybe if one military unit from Ukraine crosse...</td>\n",
       "      <td>Maybe if one military unit from Ukraine crosse...</td>\n",
       "      <td>1500259115863777280</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/Mom2ShihTzu/status/1500258...</td>\n",
       "      <td>2022-03-05 23:55:31+00:00</td>\n",
       "      <td>Volunteers cross Polish border into Ukraine to...</td>\n",
       "      <td>Volunteers cross Polish border into Ukraine to...</td>\n",
       "      <td>1500258740423086083</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/SiliconMatters/status/1500...</td>\n",
       "      <td>2022-03-05 23:54:18+00:00</td>\n",
       "      <td>@MarkHertling BUT... theres no Russian aircraf...</td>\n",
       "      <td>@MarkHertling BUT... theres no Russian aircraf...</td>\n",
       "      <td>1500258434414874625</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.500223e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            _type  \\\n",
       "0  snscrape.modules.twitter.Tweet   \n",
       "1  snscrape.modules.twitter.Tweet   \n",
       "2  snscrape.modules.twitter.Tweet   \n",
       "3  snscrape.modules.twitter.Tweet   \n",
       "4  snscrape.modules.twitter.Tweet   \n",
       "\n",
       "                                                 url  \\\n",
       "0  https://twitter.com/donveach/status/1500259722...   \n",
       "1  https://twitter.com/deliveryman199/status/1500...   \n",
       "2  https://twitter.com/JDiozzi/status/15002591158...   \n",
       "3  https://twitter.com/Mom2ShihTzu/status/1500258...   \n",
       "4  https://twitter.com/SiliconMatters/status/1500...   \n",
       "\n",
       "                        date  \\\n",
       "0  2022-03-05 23:59:25+00:00   \n",
       "1  2022-03-05 23:58:30+00:00   \n",
       "2  2022-03-05 23:57:01+00:00   \n",
       "3  2022-03-05 23:55:31+00:00   \n",
       "4  2022-03-05 23:54:18+00:00   \n",
       "\n",
       "                                             content  \\\n",
       "0  Is that the same expensive and ineffective bor...   \n",
       "1  @DonWaifu @gabehayes @aaronjmate So the Americ...   \n",
       "2  Maybe if one military unit from Ukraine crosse...   \n",
       "3  Volunteers cross Polish border into Ukraine to...   \n",
       "4  @MarkHertling BUT... theres no Russian aircraf...   \n",
       "\n",
       "                                     renderedContent                   id  \\\n",
       "0  Is that the same expensive and ineffective bor...  1500259722112520194   \n",
       "1  @DonWaifu @gabehayes @aaronjmate So the Americ...  1500259491232641025   \n",
       "2  Maybe if one military unit from Ukraine crosse...  1500259115863777280   \n",
       "3  Volunteers cross Polish border into Ukraine to...  1500258740423086083   \n",
       "4  @MarkHertling BUT... theres no Russian aircraf...  1500258434414874625   \n",
       "\n",
       "                                                user  replyCount  \\\n",
       "0  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "1  {'_type': 'snscrape.modules.twitter.User', 'us...           1   \n",
       "2  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "3  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "4  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "\n",
       "   retweetCount  likeCount  ...  retweetedTweet  \\\n",
       "0             0          1  ...             NaN   \n",
       "1             0          2  ...             NaN   \n",
       "2             0          0  ...             NaN   \n",
       "3             1          2  ...             NaN   \n",
       "4             1          4  ...             NaN   \n",
       "\n",
       "                                         quotedTweet inReplyToTweetId  \\\n",
       "0  {'_type': 'snscrape.modules.twitter.Tweet', 'u...              NaN   \n",
       "1                                                NaN     1.500251e+18   \n",
       "2                                                NaN              NaN   \n",
       "3                                                NaN              NaN   \n",
       "4                                                NaN     1.500223e+18   \n",
       "\n",
       "                                       inReplyToUser  \\\n",
       "0                                                NaN   \n",
       "1  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "2                                                NaN   \n",
       "3                                                NaN   \n",
       "4  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "\n",
       "                                      mentionedUsers coordinates place  \\\n",
       "0                                                NaN         NaN   NaN   \n",
       "1  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "2                                                NaN         NaN   NaN   \n",
       "3                                                NaN         NaN   NaN   \n",
       "4  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "\n",
       "  hashtags cashtags                   Searh  \n",
       "0      NaN      NaN  Russian border Ukraine  \n",
       "1      NaN      NaN  Russian border Ukraine  \n",
       "2      NaN      NaN  Russian border Ukraine  \n",
       "3      NaN      NaN  Russian border Ukraine  \n",
       "4      NaN      NaN  Russian border Ukraine  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd576506",
   "metadata": {
    "papermill": {
     "duration": 0.010905,
     "end_time": "2024-04-19T19:20:31.026815",
     "exception": false,
     "start_time": "2024-04-19T19:20:31.015910",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Exploratory Data Analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "618eea8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:31.051792Z",
     "iopub.status.busy": "2024-04-19T19:20:31.051369Z",
     "iopub.status.idle": "2024-04-19T19:20:31.056944Z",
     "shell.execute_reply": "2024-04-19T19:20:31.055852Z"
    },
    "papermill": {
     "duration": 0.020602,
     "end_time": "2024-04-19T19:20:31.059611",
     "exception": false,
     "start_time": "2024-04-19T19:20:31.039009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(284664, 29)\n"
     ]
    }
   ],
   "source": [
    "print(tweets.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f3d01732",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:31.084030Z",
     "iopub.status.busy": "2024-04-19T19:20:31.083636Z",
     "iopub.status.idle": "2024-04-19T19:20:31.126770Z",
     "shell.execute_reply": "2024-04-19T19:20:31.125689Z"
    },
    "papermill": {
     "duration": 0.058446,
     "end_time": "2024-04-19T19:20:31.129384",
     "exception": false,
     "start_time": "2024-04-19T19:20:31.070938",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_type</th>\n",
       "      <th>url</th>\n",
       "      <th>date</th>\n",
       "      <th>content</th>\n",
       "      <th>renderedContent</th>\n",
       "      <th>id</th>\n",
       "      <th>user</th>\n",
       "      <th>replyCount</th>\n",
       "      <th>retweetCount</th>\n",
       "      <th>likeCount</th>\n",
       "      <th>...</th>\n",
       "      <th>retweetedTweet</th>\n",
       "      <th>quotedTweet</th>\n",
       "      <th>inReplyToTweetId</th>\n",
       "      <th>inReplyToUser</th>\n",
       "      <th>mentionedUsers</th>\n",
       "      <th>coordinates</th>\n",
       "      <th>place</th>\n",
       "      <th>hashtags</th>\n",
       "      <th>cashtags</th>\n",
       "      <th>Searh</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>272783</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/germanedcantorm/status/148...</td>\n",
       "      <td>2022-01-15 22:43:10+00:00</td>\n",
       "      <td>Putin presents a profound threat to peace in E...</td>\n",
       "      <td>Putin presents a profound threat to peace in E...</td>\n",
       "      <td>1482483527006498816</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279767</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/dh_a_heller/status/1480570...</td>\n",
       "      <td>2022-01-10 16:02:12+00:00</td>\n",
       "      <td>As part of a two-day trip to Ukraine, EU forei...</td>\n",
       "      <td>As part of a two-day trip to Ukraine, EU forei...</td>\n",
       "      <td>1480570678764048389</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.480571e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86249</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/RoodbariIraj/status/149807...</td>\n",
       "      <td>2022-02-27 23:17:35+00:00</td>\n",
       "      <td>@AriaParsa13 تنها بازنده جنگها، مردم بیگناه هس...</td>\n",
       "      <td>@AriaParsa13 تنها بازنده جنگها، مردم بیگناه هس...</td>\n",
       "      <td>1498074867542986760</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.498012e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['نه_به_جنگ', 'stop_war_in_ukraine']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51229</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/jodisp2019/status/14823663...</td>\n",
       "      <td>2022-01-15 14:57:32+00:00</td>\n",
       "      <td>A \"high stakes\" trip the article says. What no...</td>\n",
       "      <td>A \"high stakes\" trip the article says. What no...</td>\n",
       "      <td>1482366344716816387</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>24</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.Tweet', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169997</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/Lee_Chris5/status/14918029...</td>\n",
       "      <td>2022-02-10 15:55:20+00:00</td>\n",
       "      <td>@TulsiGabbard @killaxxxcam The TV stations wer...</td>\n",
       "      <td>@TulsiGabbard @killaxxxcam The TV stations wer...</td>\n",
       "      <td>1491802976360357890</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.491713e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243782</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/radicalgraffiti/status/148...</td>\n",
       "      <td>2022-01-24 17:42:40+00:00</td>\n",
       "      <td>@_____newt i doubt there will be a direct war,...</td>\n",
       "      <td>@_____newt i doubt there will be a direct war,...</td>\n",
       "      <td>1485669393669447683</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.485654e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166327</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/CPGBML/status/149223755921...</td>\n",
       "      <td>2022-02-11 20:42:13+00:00</td>\n",
       "      <td>Keir #Starmer (proudly) notes “Attlee and his ...</td>\n",
       "      <td>Keir #Starmer (proudly) notes “Attlee and his ...</td>\n",
       "      <td>1492237559212257284</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Starmer', 'Labour', 'Nato', 'Iraq', 'Hitler'...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108355</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/MarJesPaul/status/14962678...</td>\n",
       "      <td>2022-02-22 23:37:08+00:00</td>\n",
       "      <td>@WalshFreedom @MalcolmNance The deaths coming ...</td>\n",
       "      <td>@WalshFreedom @MalcolmNance The deaths coming ...</td>\n",
       "      <td>1496267845034033157</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.496240e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>[{'_type': 'snscrape.modules.twitter.User', 'u...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10526</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/abhijeetg/status/149793529...</td>\n",
       "      <td>2022-02-27 14:02:59+00:00</td>\n",
       "      <td>Breaking News\\n\\n#Ukrainian and #Russian count...</td>\n",
       "      <td>Breaking News\\n\\n#Ukrainian and #Russian count...</td>\n",
       "      <td>1497935297975566340</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Ukrainian', 'Russian', 'Belarus', 'Ukrania',...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russian border Ukraine</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148974</th>\n",
       "      <td>snscrape.modules.twitter.Tweet</td>\n",
       "      <td>https://twitter.com/BertoJongman100/status/149...</td>\n",
       "      <td>2022-02-14 22:13:06+00:00</td>\n",
       "      <td>#Ukraine #Russia #war_preparations https://t.c...</td>\n",
       "      <td>#Ukraine #Russia #war_preparations theguardian...</td>\n",
       "      <td>1493347594717835272</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.493332e+18</td>\n",
       "      <td>{'_type': 'snscrape.modules.twitter.User', 'us...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Ukraine', 'Russia', 'war_preparations']</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ukraine war</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 _type  \\\n",
       "272783  snscrape.modules.twitter.Tweet   \n",
       "279767  snscrape.modules.twitter.Tweet   \n",
       "86249   snscrape.modules.twitter.Tweet   \n",
       "51229   snscrape.modules.twitter.Tweet   \n",
       "169997  snscrape.modules.twitter.Tweet   \n",
       "243782  snscrape.modules.twitter.Tweet   \n",
       "166327  snscrape.modules.twitter.Tweet   \n",
       "108355  snscrape.modules.twitter.Tweet   \n",
       "10526   snscrape.modules.twitter.Tweet   \n",
       "148974  snscrape.modules.twitter.Tweet   \n",
       "\n",
       "                                                      url  \\\n",
       "272783  https://twitter.com/germanedcantorm/status/148...   \n",
       "279767  https://twitter.com/dh_a_heller/status/1480570...   \n",
       "86249   https://twitter.com/RoodbariIraj/status/149807...   \n",
       "51229   https://twitter.com/jodisp2019/status/14823663...   \n",
       "169997  https://twitter.com/Lee_Chris5/status/14918029...   \n",
       "243782  https://twitter.com/radicalgraffiti/status/148...   \n",
       "166327  https://twitter.com/CPGBML/status/149223755921...   \n",
       "108355  https://twitter.com/MarJesPaul/status/14962678...   \n",
       "10526   https://twitter.com/abhijeetg/status/149793529...   \n",
       "148974  https://twitter.com/BertoJongman100/status/149...   \n",
       "\n",
       "                             date  \\\n",
       "272783  2022-01-15 22:43:10+00:00   \n",
       "279767  2022-01-10 16:02:12+00:00   \n",
       "86249   2022-02-27 23:17:35+00:00   \n",
       "51229   2022-01-15 14:57:32+00:00   \n",
       "169997  2022-02-10 15:55:20+00:00   \n",
       "243782  2022-01-24 17:42:40+00:00   \n",
       "166327  2022-02-11 20:42:13+00:00   \n",
       "108355  2022-02-22 23:37:08+00:00   \n",
       "10526   2022-02-27 14:02:59+00:00   \n",
       "148974  2022-02-14 22:13:06+00:00   \n",
       "\n",
       "                                                  content  \\\n",
       "272783  Putin presents a profound threat to peace in E...   \n",
       "279767  As part of a two-day trip to Ukraine, EU forei...   \n",
       "86249   @AriaParsa13 تنها بازنده جنگها، مردم بیگناه هس...   \n",
       "51229   A \"high stakes\" trip the article says. What no...   \n",
       "169997  @TulsiGabbard @killaxxxcam The TV stations wer...   \n",
       "243782  @_____newt i doubt there will be a direct war,...   \n",
       "166327  Keir #Starmer (proudly) notes “Attlee and his ...   \n",
       "108355  @WalshFreedom @MalcolmNance The deaths coming ...   \n",
       "10526   Breaking News\\n\\n#Ukrainian and #Russian count...   \n",
       "148974  #Ukraine #Russia #war_preparations https://t.c...   \n",
       "\n",
       "                                          renderedContent  \\\n",
       "272783  Putin presents a profound threat to peace in E...   \n",
       "279767  As part of a two-day trip to Ukraine, EU forei...   \n",
       "86249   @AriaParsa13 تنها بازنده جنگها، مردم بیگناه هس...   \n",
       "51229   A \"high stakes\" trip the article says. What no...   \n",
       "169997  @TulsiGabbard @killaxxxcam The TV stations wer...   \n",
       "243782  @_____newt i doubt there will be a direct war,...   \n",
       "166327  Keir #Starmer (proudly) notes “Attlee and his ...   \n",
       "108355  @WalshFreedom @MalcolmNance The deaths coming ...   \n",
       "10526   Breaking News\\n\\n#Ukrainian and #Russian count...   \n",
       "148974  #Ukraine #Russia #war_preparations theguardian...   \n",
       "\n",
       "                         id  \\\n",
       "272783  1482483527006498816   \n",
       "279767  1480570678764048389   \n",
       "86249   1498074867542986760   \n",
       "51229   1482366344716816387   \n",
       "169997  1491802976360357890   \n",
       "243782  1485669393669447683   \n",
       "166327  1492237559212257284   \n",
       "108355  1496267845034033157   \n",
       "10526   1497935297975566340   \n",
       "148974  1493347594717835272   \n",
       "\n",
       "                                                     user  replyCount  \\\n",
       "272783  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "279767  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "86249   {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "51229   {'_type': 'snscrape.modules.twitter.User', 'us...           3   \n",
       "169997  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "243782  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "166327  {'_type': 'snscrape.modules.twitter.User', 'us...           2   \n",
       "108355  {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "10526   {'_type': 'snscrape.modules.twitter.User', 'us...           0   \n",
       "148974  {'_type': 'snscrape.modules.twitter.User', 'us...           2   \n",
       "\n",
       "        retweetCount  likeCount  ...  retweetedTweet  \\\n",
       "272783             0          0  ...             NaN   \n",
       "279767             0          0  ...             NaN   \n",
       "86249              0          2  ...             NaN   \n",
       "51229              7         24  ...             NaN   \n",
       "169997             0          4  ...             NaN   \n",
       "243782             0          1  ...             NaN   \n",
       "166327             1         12  ...             NaN   \n",
       "108355             1          1  ...             NaN   \n",
       "10526              0          0  ...             NaN   \n",
       "148974             0          0  ...             NaN   \n",
       "\n",
       "                                              quotedTweet inReplyToTweetId  \\\n",
       "272783                                                NaN              NaN   \n",
       "279767                                                NaN     1.480571e+18   \n",
       "86249                                                 NaN     1.498012e+18   \n",
       "51229   {'_type': 'snscrape.modules.twitter.Tweet', 'u...              NaN   \n",
       "169997                                                NaN     1.491713e+18   \n",
       "243782                                                NaN     1.485654e+18   \n",
       "166327                                                NaN              NaN   \n",
       "108355                                                NaN     1.496240e+18   \n",
       "10526                                                 NaN              NaN   \n",
       "148974                                                NaN     1.493332e+18   \n",
       "\n",
       "                                            inReplyToUser  \\\n",
       "272783                                                NaN   \n",
       "279767  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "86249   {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "51229                                                 NaN   \n",
       "169997  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "243782  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "166327                                                NaN   \n",
       "108355  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "10526                                                 NaN   \n",
       "148974  {'_type': 'snscrape.modules.twitter.User', 'us...   \n",
       "\n",
       "                                           mentionedUsers coordinates place  \\\n",
       "272783                                                NaN         NaN   NaN   \n",
       "279767                                                NaN         NaN   NaN   \n",
       "86249   [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "51229                                                 NaN         NaN   NaN   \n",
       "169997  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "243782  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "166327                                                NaN         NaN   NaN   \n",
       "108355  [{'_type': 'snscrape.modules.twitter.User', 'u...         NaN   NaN   \n",
       "10526                                                 NaN         NaN   NaN   \n",
       "148974                                                NaN         NaN   NaN   \n",
       "\n",
       "                                                 hashtags cashtags  \\\n",
       "272783                                                NaN      NaN   \n",
       "279767                                                NaN      NaN   \n",
       "86249                ['نه_به_جنگ', 'stop_war_in_ukraine']      NaN   \n",
       "51229                                                 NaN      NaN   \n",
       "169997                                                NaN      NaN   \n",
       "243782                                                NaN      NaN   \n",
       "166327  ['Starmer', 'Labour', 'Nato', 'Iraq', 'Hitler'...      NaN   \n",
       "108355                                                NaN      NaN   \n",
       "10526   ['Ukrainian', 'Russian', 'Belarus', 'Ukrania',...      NaN   \n",
       "148974          ['Ukraine', 'Russia', 'war_preparations']      NaN   \n",
       "\n",
       "                         Searh  \n",
       "272783             Ukraine war  \n",
       "279767             Ukraine war  \n",
       "86249              Ukraine war  \n",
       "51229   Russian border Ukraine  \n",
       "169997             Ukraine war  \n",
       "243782             Ukraine war  \n",
       "166327             Ukraine war  \n",
       "108355             Ukraine war  \n",
       "10526   Russian border Ukraine  \n",
       "148974             Ukraine war  \n",
       "\n",
       "[10 rows x 29 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "random_state=42\n",
    "# print a random sample of 10 rows from the dataframe\n",
    "display(tweets.sample(n=10, random_state=random_state))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "799b5587",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:31.155514Z",
     "iopub.status.busy": "2024-04-19T19:20:31.155129Z",
     "iopub.status.idle": "2024-04-19T19:20:31.710318Z",
     "shell.execute_reply": "2024-04-19T19:20:31.708265Z"
    },
    "papermill": {
     "duration": 0.571139,
     "end_time": "2024-04-19T19:20:31.712867",
     "exception": false,
     "start_time": "2024-04-19T19:20:31.141728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "retweetedTweet      284664\n",
      "cashtags            283882\n",
      "place               281222\n",
      "coordinates         281222\n",
      "quotedTweet         261553\n",
      "media               254633\n",
      "hashtags            228651\n",
      "tcooutlinks         190927\n",
      "outlinks            190927\n",
      "inReplyToUser       155051\n",
      "inReplyToTweetId    155051\n",
      "mentionedUsers      137847\n",
      "_type                    0\n",
      "sourceLabel              0\n",
      "sourceUrl                0\n",
      "url                      0\n",
      "source                   0\n",
      "lang                     0\n",
      "conversationId           0\n",
      "quoteCount               0\n",
      "likeCount                0\n",
      "retweetCount             0\n",
      "replyCount               0\n",
      "user                     0\n",
      "id                       0\n",
      "renderedContent          0\n",
      "content                  0\n",
      "date                     0\n",
      "Searh                    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# show the number of missing rows in each column\n",
    "print(tweets.isna().sum().sort_values(ascending=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fc7acd6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:31.739102Z",
     "iopub.status.busy": "2024-04-19T19:20:31.738685Z",
     "iopub.status.idle": "2024-04-19T19:20:32.312054Z",
     "shell.execute_reply": "2024-04-19T19:20:32.310352Z"
    },
    "papermill": {
     "duration": 0.589559,
     "end_time": "2024-04-19T19:20:32.314715",
     "exception": false,
     "start_time": "2024-04-19T19:20:31.725156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 284664 entries, 0 to 284663\n",
      "Data columns (total 29 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   _type             284664 non-null  object \n",
      " 1   url               284664 non-null  object \n",
      " 2   date              284664 non-null  object \n",
      " 3   content           284664 non-null  object \n",
      " 4   renderedContent   284664 non-null  object \n",
      " 5   id                284664 non-null  int64  \n",
      " 6   user              284664 non-null  object \n",
      " 7   replyCount        284664 non-null  int64  \n",
      " 8   retweetCount      284664 non-null  int64  \n",
      " 9   likeCount         284664 non-null  int64  \n",
      " 10  quoteCount        284664 non-null  int64  \n",
      " 11  conversationId    284664 non-null  int64  \n",
      " 12  lang              284664 non-null  object \n",
      " 13  source            284664 non-null  object \n",
      " 14  sourceUrl         284664 non-null  object \n",
      " 15  sourceLabel       284664 non-null  object \n",
      " 16  outlinks          93737 non-null   object \n",
      " 17  tcooutlinks       93737 non-null   object \n",
      " 18  media             30031 non-null   object \n",
      " 19  retweetedTweet    0 non-null       float64\n",
      " 20  quotedTweet       23111 non-null   object \n",
      " 21  inReplyToTweetId  129613 non-null  float64\n",
      " 22  inReplyToUser     129613 non-null  object \n",
      " 23  mentionedUsers    146817 non-null  object \n",
      " 24  coordinates       3442 non-null    object \n",
      " 25  place             3442 non-null    object \n",
      " 26  hashtags          56013 non-null   object \n",
      " 27  cashtags          782 non-null     object \n",
      " 28  Searh             284664 non-null  object \n",
      "dtypes: float64(2), int64(6), object(21)\n",
      "memory usage: 63.0+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# print summary info on each column of the dataframe\n",
    "print(tweets.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8413defd",
   "metadata": {
    "papermill": {
     "duration": 0.012024,
     "end_time": "2024-04-19T19:20:32.339144",
     "exception": false,
     "start_time": "2024-04-19T19:20:32.327120",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**DATA CLEANING**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c112ec2",
   "metadata": {
    "papermill": {
     "duration": 0.012013,
     "end_time": "2024-04-19T19:20:32.363658",
     "exception": false,
     "start_time": "2024-04-19T19:20:32.351645",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0de6756d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:32.390178Z",
     "iopub.status.busy": "2024-04-19T19:20:32.389804Z",
     "iopub.status.idle": "2024-04-19T19:20:35.685390Z",
     "shell.execute_reply": "2024-04-19T19:20:35.684207Z"
    },
    "papermill": {
     "duration": 3.312252,
     "end_time": "2024-04-19T19:20:35.688136",
     "exception": false,
     "start_time": "2024-04-19T19:20:32.375884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tweets.drop_duplicates(inplace=True)  # remove duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3698ec34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:35.714898Z",
     "iopub.status.busy": "2024-04-19T19:20:35.714491Z",
     "iopub.status.idle": "2024-04-19T19:20:35.838291Z",
     "shell.execute_reply": "2024-04-19T19:20:35.837302Z"
    },
    "papermill": {
     "duration": 0.140373,
     "end_time": "2024-04-19T19:20:35.841009",
     "exception": false,
     "start_time": "2024-04-19T19:20:35.700636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# slicing the date , and removing the time portion\n",
    "tweets['date'] = tweets.date.str.slice(0, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "937b183a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:35.867820Z",
     "iopub.status.busy": "2024-04-19T19:20:35.867408Z",
     "iopub.status.idle": "2024-04-19T19:20:35.921773Z",
     "shell.execute_reply": "2024-04-19T19:20:35.920587Z"
    },
    "papermill": {
     "duration": 0.070562,
     "end_time": "2024-04-19T19:20:35.924198",
     "exception": false,
     "start_time": "2024-04-19T19:20:35.853636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2022-03-05' '2022-03-04' '2022-03-03' '2022-03-02' '2022-03-01'\n",
      " '2022-02-28' '2022-02-27' '2022-02-26' '2022-02-25' '2022-02-24'\n",
      " '2022-02-23' '2022-02-22' '2022-02-21' '2022-02-20' '2022-02-19'\n",
      " '2022-02-18' '2022-02-17' '2022-02-16' '2022-02-15' '2022-02-14'\n",
      " '2022-02-13' '2022-02-12' '2022-02-11' '2022-02-10' '2022-02-09'\n",
      " '2022-02-08' '2022-02-07' '2022-02-06' '2022-02-05' '2022-02-04'\n",
      " '2022-02-03' '2022-02-02' '2022-02-01' '2022-01-31' '2022-01-30'\n",
      " '2022-01-29' '2022-01-28' '2022-01-27' '2022-01-26' '2022-01-25'\n",
      " '2022-01-24' '2022-01-23' '2022-01-22' '2022-01-21' '2022-01-20'\n",
      " '2022-01-19' '2022-01-18' '2022-01-17' '2022-01-16' '2022-01-15'\n",
      " '2022-01-14' '2022-01-13' '2022-01-12' '2022-01-11' '2022-01-10'\n",
      " '2022-01-09' '2022-01-08' '2022-01-07' '2022-01-06' '2022-01-05'\n",
      " '2022-01-04' '2022-01-03' '2022-01-02' '2022-01-01' '2021-12-31']\n",
      "['en' 'es' 'und' 'hi' 'in' 'de' 'ja' 'pl' 'et' 'zh' 'ro' 'nl' 'tr' 'pa'\n",
      " 'da' 'pt' 'tl' 'eu' 'fr' 'no' 'cs' 'ru' 'fi' 'it' 'sv' 'ca' 'kn' 'sl'\n",
      " 'ta' 'ar' 'ko' 'ur' 'bn' 'gu' 'lt' 'el' 'uk' 'fa' 'lv' 'vi' 'ml' 'cy'\n",
      " 'hu' 'ht' 'th' 'ne' 'ka' 'mr' 'ps' 'sr' 'te' 'bg']\n"
     ]
    }
   ],
   "source": [
    "# checking all the unique dates in the dataset\n",
    "print(tweets['date'].unique())  \n",
    " \n",
    "# checking how many unique language\n",
    "# tweets are present in the dataset\n",
    "print(tweets[\"lang\"].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bb0d2bf9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:35.950998Z",
     "iopub.status.busy": "2024-04-19T19:20:35.950634Z",
     "iopub.status.idle": "2024-04-19T19:20:36.130958Z",
     "shell.execute_reply": "2024-04-19T19:20:36.129531Z"
    },
    "papermill": {
     "duration": 0.196911,
     "end_time": "2024-04-19T19:20:36.133543",
     "exception": false,
     "start_time": "2024-04-19T19:20:35.936632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(284664, 29)\n",
      "After removing non-english Tweets\n",
      "(272482, 29)\n"
     ]
    }
   ],
   "source": [
    "# before removing the non-english tweets\n",
    "print(tweets.shape)\n",
    "\n",
    "# removing all the tweets expect the\n",
    "# non-english tweets\n",
    "tweets = tweets[tweets['lang'] == 'en']\n",
    "print(\"After removing non-english Tweets\")\n",
    "\n",
    "# only the number of english tweets\n",
    "print(tweets.shape) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4edcbb0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:36.162559Z",
     "iopub.status.busy": "2024-04-19T19:20:36.161834Z",
     "iopub.status.idle": "2024-04-19T19:20:36.177128Z",
     "shell.execute_reply": "2024-04-19T19:20:36.175929Z"
    },
    "papermill": {
     "duration": 0.032727,
     "end_time": "2024-04-19T19:20:36.179601",
     "exception": false,
     "start_time": "2024-04-19T19:20:36.146874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Given what is happening in Ukraine Russia now we know what trump did by withholding aide to be so criminal and evil given the conflict hazard in that region; he wasn’t even convicted of extortion during a war conflict - this country is full of idiots\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "\n",
    "def print_random_tweet() -> None:\n",
    "    random_tweet = tweets[\"content\"].sample(n=1, random_state=random_state).values\n",
    "    print(random_tweet[0])\n",
    "\n",
    "print_random_tweet()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0de239c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:36.207349Z",
     "iopub.status.busy": "2024-04-19T19:20:36.206976Z",
     "iopub.status.idle": "2024-04-19T19:20:52.812595Z",
     "shell.execute_reply": "2024-04-19T19:20:52.811406Z"
    },
    "papermill": {
     "duration": 16.622529,
     "end_time": "2024-04-19T19:20:52.815131",
     "exception": false,
     "start_time": "2024-04-19T19:20:36.192602",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Given what is happening in Ukraine Russia now we know what trump did by withholding aide to be so criminal and evil given the conflict hazard in that region  he wasn t even convicted of extortion during a war conflict   this country is full of idiots\n"
     ]
    }
   ],
   "source": [
    "# Removing RT, Punctuation etc\n",
    "def remove_rt(x): return re.sub('RT @\\w+: ', \" \", x)\n",
    " \n",
    "def rt(x): return re.sub(\n",
    "    \"(@[A-Za-z0-9]+)|([^0-9A-Za-z \\t])|(\\w+:\\/\\/\\S+)\", \" \", x)\n",
    "tweets.loc[:, \"content\"] = tweets[\"content\"].map(remove_rt).map(rt)\n",
    "print_random_tweet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9a1b5c84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:52.843520Z",
     "iopub.status.busy": "2024-04-19T19:20:52.843091Z",
     "iopub.status.idle": "2024-04-19T19:20:53.044805Z",
     "shell.execute_reply": "2024-04-19T19:20:53.043654Z"
    },
    "papermill": {
     "duration": 0.219143,
     "end_time": "2024-04-19T19:20:53.047354",
     "exception": false,
     "start_time": "2024-04-19T19:20:52.828211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "given what is happening in ukraine russia now we know what trump did by withholding aide to be so criminal and evil given the conflict hazard in that region  he wasn t even convicted of extortion during a war conflict   this country is full of idiots\n"
     ]
    }
   ],
   "source": [
    "tweets.loc[:, \"content\"] = tweets[\"content\"].str.lower()\n",
    "print_random_tweet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d6a29e52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:20:53.075568Z",
     "iopub.status.busy": "2024-04-19T19:20:53.074790Z",
     "iopub.status.idle": "2024-04-19T19:21:00.788000Z",
     "shell.execute_reply": "2024-04-19T19:21:00.786743Z"
    },
    "papermill": {
     "duration": 7.730471,
     "end_time": "2024-04-19T19:21:00.790801",
     "exception": false,
     "start_time": "2024-04-19T19:20:53.060330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "given what is happening in ukraine russia now we know what trump did by withholding aide to be so criminal and evil given the conflict hazard in that region  he wasn t even convicted of extortion during a war conflict   this country is full of idiots\n"
     ]
    }
   ],
   "source": [
    "def remove_numerical(text):\n",
    "    return ''.join([word for word in text if not word.isdigit()])\n",
    "\n",
    "tweets.loc[:, \"content\"] = tweets[\"content\"].str.lower().apply(remove_numerical)\n",
    "print_random_tweet()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a89465a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:00.818991Z",
     "iopub.status.busy": "2024-04-19T19:21:00.818606Z",
     "iopub.status.idle": "2024-04-19T19:21:01.216310Z",
     "shell.execute_reply": "2024-04-19T19:21:01.215171Z"
    },
    "papermill": {
     "duration": 0.415119,
     "end_time": "2024-04-19T19:21:01.219206",
     "exception": false,
     "start_time": "2024-04-19T19:21:00.804087",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def remove_non_sensical(text):\n",
    "    return text.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n",
    "\n",
    "# Assuming tweets is your DataFrame\n",
    "tweets.loc[:, \"content\"] = tweets[\"content\"].str.lower().apply(remove_non_sensical)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f6fda004",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:01.247630Z",
     "iopub.status.busy": "2024-04-19T19:21:01.247196Z",
     "iopub.status.idle": "2024-04-19T19:21:03.414758Z",
     "shell.execute_reply": "2024-04-19T19:21:03.413590Z"
    },
    "papermill": {
     "duration": 2.185251,
     "end_time": "2024-04-19T19:21:03.417597",
     "exception": false,
     "start_time": "2024-04-19T19:21:01.232346",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0         [is, that, the, same, expensive, and, ineffect...\n",
      "1         [so, the, americans, are, dressing, up, as, ru...\n",
      "2         [maybe, if, one, military, unit, from, ukraine...\n",
      "3         [volunteers, cross, polish, border, into, ukra...\n",
      "4         [but, theres, no, russian, aircraft, flying, n...\n",
      "                                ...                        \n",
      "284659    [rusia, wants, to, take, back, ukraine, they, ...\n",
      "284660    [a, positive, for, russia, is, that, according...\n",
      "284661    [resists, further, invades, because, already, ...\n",
      "284662    [i, fully, support, ukraine, s, sovereignty, b...\n",
      "284663    [biden, warns, putin, what, does, acting, deci...\n",
      "Name: tokenized_review, Length: 272482, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Function to tokenize text using split()\n",
    "def tokenize_text(text):\n",
    "    tokens = text.split()\n",
    "    return tokens\n",
    "\n",
    "# Apply the tokenize_text function to your DataFrame column\n",
    "tweets['tokenized_review'] = tweets['content'].apply(tokenize_text)\n",
    "\n",
    "# Show the DataFrame with tokenized reviews\n",
    "print(tweets['tokenized_review'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "67e16d1a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:03.445932Z",
     "iopub.status.busy": "2024-04-19T19:21:03.445555Z",
     "iopub.status.idle": "2024-04-19T19:21:03.470068Z",
     "shell.execute_reply": "2024-04-19T19:21:03.468340Z"
    },
    "papermill": {
     "duration": 0.041625,
     "end_time": "2024-04-19T19:21:03.472564",
     "exception": false,
     "start_time": "2024-04-19T19:21:03.430939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Corpus:\n",
      "                                                  content\n",
      "0       is that the same expensive and ineffective bor...\n",
      "1             so the americans are dressing up as russ...\n",
      "2       maybe if one military unit from ukraine crosse...\n",
      "3       volunteers cross polish border into ukraine to...\n",
      "4         but    theres no russian aircraft flying nea...\n",
      "...                                                   ...\n",
      "284659  rusia wants to take back ukraine  they are our...\n",
      "284660  a positive for russia is that  according to us...\n",
      "284661      resists  further invades  because already ...\n",
      "284662      i fully support ukraine s sovereignty  but...\n",
      "284663  biden warns putin   what does acting decisivel...\n",
      "\n",
      "[272482 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "corpus = tweets[['content']].copy()\n",
    "\n",
    "# Display the corpus\n",
    "print(\"Corpus:\")\n",
    "print(corpus)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ff54484",
   "metadata": {
    "papermill": {
     "duration": 0.013003,
     "end_time": "2024-04-19T19:21:03.498980",
     "exception": false,
     "start_time": "2024-04-19T19:21:03.485977",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**DOCUMENT TERM MATRIX**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "36fb7137",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:03.527654Z",
     "iopub.status.busy": "2024-04-19T19:21:03.527212Z",
     "iopub.status.idle": "2024-04-19T19:21:03.634029Z",
     "shell.execute_reply": "2024-04-19T19:21:03.632808Z"
    },
    "papermill": {
     "duration": 0.124482,
     "end_time": "2024-04-19T19:21:03.636863",
     "exception": false,
     "start_time": "2024-04-19T19:21:03.512381",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     aa  abandoned  abhinandan  ability  able  abm  abortion  absolute  \\\n",
      "0     0          0           0        0     0    0         0         0   \n",
      "1     0          0           0        0     0    0         0         0   \n",
      "2     0          0           0        0     0    0         0         0   \n",
      "3     0          0           0        0     0    0         0         0   \n",
      "4     0          0           0        0     0    0         0         0   \n",
      "..   ..        ...         ...      ...   ...  ...       ...       ...   \n",
      "995   0          0           0        0     0    0         0         0   \n",
      "996   0          0           0        0     0    0         0         0   \n",
      "997   0          0           0        0     0    0         0         0   \n",
      "998   0          0           0        0     0    0         0         0   \n",
      "999   0          0           0        0     0    0         0         0   \n",
      "\n",
      "     absolutely  absorbed  ...  zelenksy  zelensky  zelenskyy  zhytomyr  \\\n",
      "0             0         0  ...         0         0          0         0   \n",
      "1             0         0  ...         0         0          0         0   \n",
      "2             0         0  ...         0         0          0         0   \n",
      "3             0         0  ...         0         0          0         0   \n",
      "4             0         0  ...         0         0          0         0   \n",
      "..          ...       ...  ...       ...       ...        ...       ...   \n",
      "995           0         0  ...         0         0          0         0   \n",
      "996           0         0  ...         0         0          0         0   \n",
      "997           0         0  ...         0         0          0         0   \n",
      "998           0         0  ...         0         0          0         0   \n",
      "999           0         0  ...         0         0          0         0   \n",
      "\n",
      "     zionazi  zoka  zone  zones  zoomed  zubrin  \n",
      "0          0     0     0      0       0       0  \n",
      "1          0     0     0      0       0       0  \n",
      "2          0     0     0      0       0       0  \n",
      "3          0     0     0      0       0       0  \n",
      "4          0     0     1      0       0       0  \n",
      "..       ...   ...   ...    ...     ...     ...  \n",
      "995        0     0     0      0       0       0  \n",
      "996        0     0     0      0       0       0  \n",
      "997        0     0     0      0       0       0  \n",
      "998        0     0     0      0       0       0  \n",
      "999        0     0     0      0       0       0  \n",
      "\n",
      "[1000 rows x 4502 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "import pandas as pd\n",
    "\n",
    "# Assuming df1 is your DataFrame with more than 100 entries\n",
    "# Sample data (assuming df1 is your DataFrame)\n",
    "df1_sample = tweets.head(1000)  # Selecting the first 100 entries\n",
    "\n",
    "# Step 1: Create a CountVectorizer object\n",
    "cv = CountVectorizer(stop_words='english')\n",
    "\n",
    "# Step 2: Fit and transform the data to create the document-term matrix\n",
    "data_cv = cv.fit_transform(df1_sample['content'])\n",
    "\n",
    "# Step 3: Convert the document-term matrix to a DataFrame\n",
    "data_dtm = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names_out())\n",
    "\n",
    "# Display the document-term matrix\n",
    "print(data_dtm)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "341f5c08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:03.666203Z",
     "iopub.status.busy": "2024-04-19T19:21:03.665786Z",
     "iopub.status.idle": "2024-04-19T19:21:09.913984Z",
     "shell.execute_reply": "2024-04-19T19:21:09.912807Z"
    },
    "papermill": {
     "duration": 6.26608,
     "end_time": "2024-04-19T19:21:09.916648",
     "exception": false,
     "start_time": "2024-04-19T19:21:03.650568",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the function to clean text for round 3\n",
    "def clean_text_round3(text):\n",
    "    text = re.sub('–', '', text)\n",
    "    text = re.sub('\\xa0', '', text)\n",
    "    text = re.sub('[♪]', '', text)\n",
    "    text = re.sub('\\s+', ' ', text.strip())\n",
    "    return text\n",
    "\n",
    "# Apply the clean_text_round3 function to the 'content' column of your DataFrame\n",
    "tweets['clean_content'] = tweets['content'].apply(clean_text_round3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7411cb59",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:09.945922Z",
     "iopub.status.busy": "2024-04-19T19:21:09.945534Z",
     "iopub.status.idle": "2024-04-19T19:21:09.954039Z",
     "shell.execute_reply": "2024-04-19T19:21:09.952969Z"
    },
    "papermill": {
     "duration": 0.0262,
     "end_time": "2024-04-19T19:21:09.956585",
     "exception": false,
     "start_time": "2024-04-19T19:21:09.930385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    is that the same expensive and ineffective bor...\n",
       "1    so the americans are dressing up as russians c...\n",
       "2    maybe if one military unit from ukraine crosse...\n",
       "3    volunteers cross polish border into ukraine to...\n",
       "4    but theres no russian aircraft flying near lvi...\n",
       "Name: clean_content, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tweets['clean_content'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "33ca6cea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:09.986017Z",
     "iopub.status.busy": "2024-04-19T19:21:09.985635Z",
     "iopub.status.idle": "2024-04-19T19:21:30.058441Z",
     "shell.execute_reply": "2024-04-19T19:21:30.057228Z"
    },
    "papermill": {
     "duration": 20.090748,
     "end_time": "2024-04-19T19:21:30.061146",
     "exception": false,
     "start_time": "2024-04-19T19:21:09.970398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        border  russia  russian  war\n",
      "0            1       0        1    0\n",
      "1            1       0        3    0\n",
      "2            1       0        1    0\n",
      "3            1       0        1    0\n",
      "4            1       1        1    0\n",
      "...        ...     ...      ...  ...\n",
      "272477       0       0        0    1\n",
      "272478       0       1        0    1\n",
      "272479       0       1        0    1\n",
      "272480       0       2        0    1\n",
      "272481       0       1        0    1\n",
      "\n",
      "[272482 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "# Create a CountVectorizer object with specified parameters\n",
    "cv = CountVectorizer(stop_words='english', ngram_range=(1, 2), min_df=0.2, max_df=0.8)\n",
    "\n",
    "# Fit and transform the data to create the document-term matrix\n",
    "data_cv = cv.fit_transform(corpus['content'])\n",
    "\n",
    "# Convert the document-term matrix to a DataFrame\n",
    "data_dtm2 = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names_out())\n",
    "\n",
    "# Display the document-term matrix\n",
    "print(data_dtm2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "777aea02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:30.090416Z",
     "iopub.status.busy": "2024-04-19T19:21:30.090051Z",
     "iopub.status.idle": "2024-04-19T19:21:30.095622Z",
     "shell.execute_reply": "2024-04-19T19:21:30.094373Z"
    },
    "papermill": {
     "duration": 0.023284,
     "end_time": "2024-04-19T19:21:30.098311",
     "exception": false,
     "start_time": "2024-04-19T19:21:30.075027",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1000, 4502)\n",
      "(272482, 4)\n"
     ]
    }
   ],
   "source": [
    "print(data_dtm.shape) \n",
    "print(data_dtm2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "608227c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:30.128015Z",
     "iopub.status.busy": "2024-04-19T19:21:30.127284Z",
     "iopub.status.idle": "2024-04-19T19:21:30.142788Z",
     "shell.execute_reply": "2024-04-19T19:21:30.141982Z"
    },
    "papermill": {
     "duration": 0.032923,
     "end_time": "2024-04-19T19:21:30.144996",
     "exception": false,
     "start_time": "2024-04-19T19:21:30.112073",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame saved to dtm.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Assuming `df` is your DataFrame\n",
    "# Save the DataFrame to a pickle file\n",
    "with open('dtm.pkl', 'wb') as f:\n",
    "    pickle.dump(data_dtm2, f)\n",
    "\n",
    "print(\"DataFrame saved to dtm.pkl\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d7284ca4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-19T19:21:30.174598Z",
     "iopub.status.busy": "2024-04-19T19:21:30.174186Z",
     "iopub.status.idle": "2024-04-19T19:21:35.443115Z",
     "shell.execute_reply": "2024-04-19T19:21:35.442234Z"
    },
    "papermill": {
     "duration": 5.287246,
     "end_time": "2024-04-19T19:21:35.446238",
     "exception": false,
     "start_time": "2024-04-19T19:21:30.158992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame saved to dataframe.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Assuming `df` is your DataFrame\n",
    "# Save the DataFrame to a pickle file\n",
    "with open('dataframe.pkl', 'wb') as f:\n",
    "    pickle.dump(tweets, f)\n",
    "\n",
    "print(\"DataFrame saved to dataframe.pkl\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 1981187,
     "sourceId": 3271147,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 110.239443,
   "end_time": "2024-04-19T19:21:37.387314",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-19T19:19:47.147871",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
